---
layout: post
title:  "c lang: const"
date:   2012-02-16 13:31:01 +0800
categories: lang
tags: c
---

* content
{:toc}


# const

The const modifier is trivial: it modifies what precedes it, unless nothing precedes it. So:
```c
char const* buffer;  // const modifies char
char* const buffer;  // const modifies *
```
Generally, It's best to avoid the forms where nothing precedes the const, but in practice, you're going to see them.
So you have to remember that when no type precedes the const, you have to logically move it behind the first type. So:
```c
const char** buffer;
// is in fact:
char const** buffer;		// i.e. pointer to pointer to const char.
```

Finally, in a function declaration, a [] after reads as a * before. 
(Again, it's probably better to avoid this misleading notation, but you're going to see it, so you have to deal with it.) So:
```c
char * const argv[],   //  As function argument
//is:
char *const * argv,    // a pointer to a const pointer to a char.
```

# Q: memmove overlap

[Come from][1]

The second arg in the prototypes for memmove/memcpy/strcpy are similar: For example:
```c
void *memmove(void *dest, const void *src, size_t n); //const void*
char *strcpy(char *dest, const char *src); //const char*
```
But apparently, if dest and src overlap, then src's content will be altered, violating the const void/char *?

## A:

It means memmove guarantees it won't directly modify the memory pointed by src.
Of course if the two blocks overlap memmove will change the so-called "const" memory.
const is ca contract attached to a name. There's no way to make the actual memory read-only.

  [1]: http://stackoverflow.com/questions/7445331/what-does-the-const-void-mean-in-memmove
