---
layout: post
title:  "network"
date:   2014-02-16 13:31:01 +0800
categories: linux
tags: network
---

* content
{:toc}


# config

## vlan

    $ sudo ip link add link eth0 name vlan125 type vlan id 125
    $ sudo ip addr add 192.168.17.122/24 dev vlan125
    $ sudo ip route change default via 192.168.17.125
    $ ip route list
    $ ping 192.168.17.125
    $ ping 8.8.8.8

## ICMP - REDIRECT MESSAGE ANALYSIS

1. Routers MUST NOT generate a Redirect Message unless all the following conditions are met:

- The packet is being forwarded out the same physical interface that it was received from.
- The IP source address in the packet is on the same Logical IP (sub)network as the next-hop IP address.
- The packet does not contain an IP source route option.
- The source address used in the ICMP Redirect MUST belong to the same logical (sub)net as the destination address.

2. Cisco: When Are ICMP Redirects Sent?

Cisco routers send ICMP redirects when all of these conditions are met:

- The interface on which the packet comes into the router is the same interface on which the packet gets routed out.
- The subnet or network of the source IP address is on the same subnet or network of the next-hop IP address of the routed packet.
- The datagram is not source-routed.
- The kernel is configured to send redirects. (By default, Cisco routers send ICMP redirects. The interface subcommand no ip redirects can be used to disable ICMP redirects.)

# sniffer

    $ sudo apt-get install wireshark
    $ sudo apt-get install tshark
    $ sudo apt-get install ngrep
    $ sudo apt-get install httpry

## tcpdump

In tcpdump command, you can give “and”, “or” and “not” condition to filter the packets accordingly.

    - n only show ip address
    - e show mac address
    - c limit number of package

       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]
               [ -c count ]
               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]
               [ -i interface ] [ -j tstamp_type ] [ -m module ] [ -M secret ]
               [ --number ] [ -Q in|out|inout ]
               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]
               [ -W filecount ]
               [ -E spi@ipaddr algo:secret,...  ]
               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]
               [ --time-stamp-precision=tstamp_precision ]
               [ --immediate-mode ] [ --version ]
               [ expression ]


    [host|dst|src]

    $ sudo tcpdump -w xpackets.pcap -i eth0 dst 10.181.140.216 and port 22
    $ sudo tcpdump -ni eth0 not arp and not rarp
    $ sudo tcpdump -i vlan125 -en

## tshark

Using the -T we specify that we want to extract fields and with the -e options we identify which fields we want to extract.

### dns

Here is an example that extracts both the DNS query and the response address.

    $ sudo tshark -i wlan0 -f "src port 53" -n -T fields -e dns.qry.name -e dns.resp.addr

      68 campus-map.stanford.edu	171.64.144.142
      www.google.com	
      itunes.apple.com	104.74.40.29
      71 itunes.apple.com	
      campus-map.stanford.edu	
      admission.stanford.edu	171.67.215.200
      74 financialaid.stanford.edu	171.67.215.200
      admission.stanford.edu

    $ tshark -i wlan0 -f "src port 53" -n -T fields -e frame.time -e ip.src -e ip.dst -e dns.qry.name -e dns.resp.addr

      Apr 22, 2015 23:20:16.922103000 8.8.8.8 192.168.1.7 wprecon.com	198.74.56.127
      1 Apr 22, 2015 23:20:17.314244000 8.8.8.8 192.168.1.7 wprecon.com	
      2 Apr 22, 2015 23:20:18.090110000 8.8.8.8 192.168.1.7 code.jquery.com

### tcp content search

    $ tshark -i wlan0 -Y 'http.request.method == POST and tcp contains "password"' | grep password

### http

    $ sudo tshark -i wlan0 -Y http.request -T fields -e http.host -e http.user_agent

### list interfaces

    $ ip link

      1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
          link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
          link/ether 52:54:00:83:88:c2 brd ff:ff:ff:ff:ff:ff
      3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
          link/ether 52:54:00:f0:5b:54 brd ff:ff:ff:ff:ff:ff
      4: vlan125@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default
          link/ether 52:54:00:83:88:c2 brd ff:ff:ff:ff:ff:ff

### list ip-addr, mac-addr

    $ sudo tshark -i vlan125 -f "port 80" -T fields -e eth.src -e ip.src -e eth.dst -e ip.dst -e tcp

      52:54:00:83:88:c2       192.168.17.122  52:54:00:bd:0c:1c       198.167.239.174 Transmission Control Protocol, Src Port: 46929 (46929), Dst Port: http (80), Seq: 0, Len: 0
      52:54:00:bd:0c:1c       198.167.239.174 52:54:00:83:88:c2       192.168.17.122  Transmission Control Protocol, Src Port: http (80), Dst Port: 46929 (46929), Seq: 0, Ack: 1, Len: 0
      52:54:00:83:88:c2       192.168.17.122  52:54:00:bd:0c:1c       198.167.239.174 Transmission Control Protocol, Src Port: 46929 (46929), Dst Port: http (80), Seq: 1, Ack: 1, Len: 0
      52:54:00:83:88:c2       192.168.17.122  52:54:00:bd:0c:1c       198.167.239.174 Transmission Control Protocol, Src Port: 46929 (46929), Dst Port: http (80), Seq: 1, Ack: 1, Len: 77

### list interfaces

    > $ tshark -D
    > tshark: There are no interfaces on which a capture can be done

    $ sudo tshark -D            # et a list of the available network interfaces
    1. eth0
    2. nflog (Linux netfilter log (NFLOG) interface)
    3. any (Pseudo-device that captures on all interfaces)
    4. lo

### capture to file

    $ tshark -i eth0
    $ tshark -i eth0 -c 500 -w /tmp/http-test.pcap      # capture-to file
    $ tshark -r /tmp/http-test.pcap                     # view content of capture-file

### capture filter by protocol

    $ tshark -i eth0 -Y "http"
    $ tshark -i eth0 -Y "icmp"

### search from capture

    $ tshark -r nmap.pcap -R "ip.src == 2.x.yy.6 || ip.dst == 2.x.yy.6"
    $ tshark -q -r http.pcap -R http -z http,tree
    $ tshark -r nmap.pcap -R "icmp"

### filter

    $ tshark -w /tmp/dhcp.pcap -f "port 67 or port 68" -i eth1 -P
        -f "host 192.168.1.100 and (dst port 53 or 80)"
        -f "not broadcast and not multicast"
        -f "http.response.code == 404 && ip.addr == 192.168.10.1"
        -f "tcp.port == 25"
        -Y "ip.addr==192.168.1.1"
        -Y "tcp.port== 8800 and http.request"
        -Y "not arp or icmp"
        -d udp.port==8472,vxlan -r 1.cap "tcp.analysis.duplicate_ack_num==1"

    $ tshark -r /tmp/dhcp.pcap bootp.option.dhcp == 1
    $ tshark -r ~/dhcp.pcap -V frame.number == 1        # view content of a single packet

### formatting

    $ tshark -i eth2 -O  icmp
        -V verbose and display details about packets
        -O like the -V option, however this will show details of a specific protocol

### list of IP conversations

    $ tshark -r cap.pcap -z conv,ip

## ngrep

    $ sudo apt-get install ngrep
    $ ngrep [options] pattern [filter]

    ### if pattern = '' means match anything
    $ sudo ngrep -q ''  "host 10.1.1.129 and port 80 and not port 22"
    $ sudo ngrep -q -d eth1 ''  'src host 10.1.1.129 and port 80'

### capture to file

```
    # ngrep -O /tmp/dns.dump -d any -T port domain
        interface: any
        filter: ip and ( port domain )
        output: /tmp/dns.dump

    # ngrep -I /tmp/dns.dump port 80
        input: /tmp/dns.dump
        filter: ip and ( port 80 )

```

### protocol

    $ ngrep -q 'HTTP' 'tcp'
    $ ngrep -q 'HTTP' 'udp'
    $ ngrep -q 'HTTP' 'icmp'

### filter

    $ ngrep -q 'HTTP' 'host 192.168'
    $ ngrep -q 'HTTP' 'dst host 192.168'
    $ ngrep -q 'HTTP' 'port 80'

    ### only filter working
    $ ngrep -q '' -e 'host xx.xx.xxx.170 and not udp port 22'

### content match

```
    $ ngrep -t '^(GET|POST) ' 'src host 12.13.14.15 and tcp and dst port 80'

        The caret (^) instructs ngrep to only look at the beginning of the packet payload. As above, the (...|...) will match
        either GET or POST. Ngrep will show just the actual web requests:

    $ ngrep -t '^(GET|POST) ' 'src host 12.13.14.15 and tcp and dst port 80'

        interface: eth0 (12.13.14.0/255.255.255.0)
        filter: ip and ( src host 12.13.14.15 and tcp and dst port 80 )
        match: ^(GET|POST)


    $ ngrep -t '' 'tcp and port 80'

    $ ngrep -t '^(GET|POST|HEAD) ' 'dst host 67.207.152.20 and tcp and dst port 80' -W byline

        interface: wlan0 (192.168.1.0/255.255.255.0)
        filter: (ip or ip6) and ( dst host 67.207.152.20 and tcp and dst port 80 )
        match: ^(GET|POST|HEAD) 

        ###
        T 2015/06/11 12:11:07.697041 192.168.1.15:34153 -> 67.207.152.20:80 [AP]
        HEAD / HTTP/1.1.
        User-Agent: curl/7.35.0.
        Host: xtof.ch.
        Accept: */*.
        .

        ###
```

### Sample

```
    $ sudo ngrep port 80

        interface: wlp3s0 (192.168.0.0/255.255.255.0)
        filter: (ip or ip6) and ( port 80 )
        ######
        T 192.168.0.121:43314 -> 198.167.239.174:80 [AP]
          GET / HTTP/1.1..Host: www.tired.com..User-Agent: curl/7.47.0..Accept: */*....
        ##
        T 198.167.239.174:80 -> 192.168.0.121:43314 [AP]
          HTTP/1.1 200 OK..Date: Thu, 06 Apr 2017 06:01:00 GMT..Server: Apache/2.2.16 (Debian)..Last-Modified: Mon, 29 Sep 2003 08:34:25 GMT.
          .ETag: "3d7130-b8-3c873c3fc0640"..Accept-Ranges: bytes..Content-Length: 184..Vary: Accept-Encoding..Content-Type: text/html..X-Pad:
           avoid browser bug....<HTML>.<HEAD>.<TITLE>Are you tired?</TITLE>.</HEAD>.<BODY BGCOLOR=#FFFFFF>.<PRE>.<CENTER>....Are you tired?..
          Tell <a href="mailto:tired@tired.com">us</a> why..</CENTER>.</PRE>.</BODY>.
        ####


    $ sudo ngrep -W byline port 80

        interface: wlp3s0 (192.168.0.0/255.255.255.0)
        filter: (ip or ip6) and ( port 80 )
        ####
        T 192.168.0.121:43318 -> 198.167.239.174:80 [AP]
        GET / HTTP/1.1.
        Host: www.tired.com.
        User-Agent: curl/7.47.0.
        Accept: */*.
        .

        ##
        T 198.167.239.174:80 -> 192.168.0.121:43318 [AP]
        HTTP/1.1 200 OK.
        Date: Thu, 06 Apr 2017 06:03:04 GMT.
        Server: Apache/2.2.16 (Debian).
        Last-Modified: Mon, 29 Sep 2003 08:34:25 GMT.
        ETag: "3d7130-b8-3c873c3fc0640".
        Accept-Ranges: bytes.
        Content-Length: 184.
        Vary: Accept-Encoding.
        Content-Type: text/html.
        X-Pad: avoid browser bug.
        .
        <HTML>
        <HEAD>
        <TITLE>Are you tired?</TITLE>
        </HEAD>
        <BODY BGCOLOR=#FFFFFF>
        <PRE>
        <CENTER>

        Are you tired?

        Tell <a href="mailto:tired@tired.com">us</a> why.
        </CENTER>
        </PRE>
        </BODY>

        ####
```

## httpry

    $ sudo apt install httpry

    $ sudo httpry -i eth0
    $ sudo httpry -i eth0 'host 192.168.5.25'

    $ sudo httpry -i eth0 -b output.dump    # save raw HTTP packets into a binary file
    $ httpry -r output.dump                 # replay saved HTTP packets

    $ sudo httpry -i eth0 -o output.txt     # save httpry's output to a text file
    $ sudo httpry -i eth0 -m get,head


## common port

```
+---------------------------------------------------------+
|Port Number|                 Description                 |
|-----------+---------------------------------------------|
|1          |TCP Port Service Multiplexer (TCPMUX)        |
|-----------+---------------------------------------------|
|5          |Remote Job Entry (RJE)                       |
|-----------+---------------------------------------------|
|7          |ECHO                                         |
|-----------+---------------------------------------------|
|18         |Message Send Protocol (MSP)                  |
|-----------+---------------------------------------------|
|20         |FTP -- Data                                  |
|-----------+---------------------------------------------|
|21         |FTP -- Control                               |
|-----------+---------------------------------------------|
|22         |SSH Remote Login Protocol                    |
|-----------+---------------------------------------------|
|23         |Telnet                                       |
|-----------+---------------------------------------------|
|25         |Simple Mail Transfer Protocol (SMTP)         |
|-----------+---------------------------------------------|
|29         |MSG ICP                                      |
|-----------+---------------------------------------------|
|37         |Time                                         |
|-----------+---------------------------------------------|
|42         |Host Name Server (Nameserv)                  |
|-----------+---------------------------------------------|
|43         |WhoIs                                        |
|-----------+---------------------------------------------|
|49         |Login Host Protocol (Login)                  |
|-----------+---------------------------------------------|
|53         |Domain Name System (DNS)                     |
|-----------+---------------------------------------------|
|69         |Trivial File Transfer Protocol (TFTP)        |
|-----------+---------------------------------------------|
|70         |Gopher Services                              |
|-----------+---------------------------------------------|
|79         |Finger                                       |
|-----------+---------------------------------------------|
|80         |HTTP                                         |
|-----------+---------------------------------------------|
|103        |X.400 Standard                               |
|-----------+---------------------------------------------|
|108        |SNA Gateway Access Server                    |
|-----------+---------------------------------------------|
|109        |POP2                                         |
|-----------+---------------------------------------------|
|110        |POP3                                         |
|-----------+---------------------------------------------|
|115        |Simple File Transfer Protocol (SFTP)         |
|-----------+---------------------------------------------|
|118        |SQL Services                                 |
|-----------+---------------------------------------------|
|119        |Newsgroup (NNTP)                             |
|-----------+---------------------------------------------|
|137        |NetBIOS Name Service                         |
|-----------+---------------------------------------------|
|139        |NetBIOS Datagram Service                     |
|-----------+---------------------------------------------|
|143        |Interim Mail Access Protocol (IMAP)          |
|-----------+---------------------------------------------|
|150        |NetBIOS Session Service                      |
|-----------+---------------------------------------------|
|156        |SQL Server                                   |
|-----------+---------------------------------------------|
|161        |SNMP                                         |
|-----------+---------------------------------------------|
|179        |Border Gateway Protocol (BGP)                |
|-----------+---------------------------------------------|
|190        |Gateway Access Control Protocol (GACP)       |
|-----------+---------------------------------------------|
|194        |Internet Relay Chat (IRC)                    |
|-----------+---------------------------------------------|
|197        |Directory Location Service (DLS)             |
|-----------+---------------------------------------------|
|389        |Lightweight Directory Access Protocol (LDAP) |
|-----------+---------------------------------------------|
|396        |Novell Netware over IP                       |
|-----------+---------------------------------------------|
|443        |HTTPS                                        |
|-----------+---------------------------------------------|
|444        |Simple Network Paging Protocol (SNPP)        |
|-----------+---------------------------------------------|
|445        |Microsoft-DS                                 |
|-----------+---------------------------------------------|
|458        |Apple QuickTime                              |
|-----------+---------------------------------------------|
|546        |DHCP Client                                  |
|-----------+---------------------------------------------|
|547        |DHCP Server                                  |
|-----------+---------------------------------------------|
|563        |SNEWS                                        |
|-----------+---------------------------------------------|
|569        |MSN                                          |
|-----------+---------------------------------------------|
|1080       |Socks                                        |
+---------------------------------------------------------+
```

  [1]: https://sourceware.org/gdb/onlinedocs/gdb/gdbserver-man.html
  [2]: https://sourceware.org/gdb/wiki/FAQ
  [3]: https://blogs.oracle.com/ksplice/entry/8_gdb_tricks_you_should
  [4]: http://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html
  [5]: https://github.com/huawenyu/neogdb.vim
  [6]: https://networkengineering.stackexchange.com/questions/14965/icmp-redirect-static-routing

tshark -i 1 -R xml -T fields -e frame - frame.time -e ip.src -e ip.dst -e tcp -e xml -V -l

sudo tshark -i vlan125 -f "port 80" -T fields -e eth.src -e ip.src -e eth.dst -e ip.dst -e tcp

tshark -T fields -e udp.length -f "port 53" > udplength.txt

Now where TSHARK becomes really powerful is when you combine it with Linux’s powerful command line text manipulation like grep, sort, uniq, sed or gawk.  Say for example you wanted to see a list of all the destination IP addresses and how many times they have talked in a particular PCAP file.  Run the below command:

$ sudo tshark -r http.pcap -T fields -e ip.dst | sort | uniq -c

So what does each of those command switches do?  Well, the -r switch reads in an existing pcap file.  The -T switch we’ve already talked about, but I made sure to us the fields command to tell it I wanted specific fields to be output and finally the -e function tells TSHARK which fields you want outputted.  Now if I were to just run the TSHARK command I would get all the destination IP addresses for every packet in the http.pcap file.  That’s fine, but what I’ve done is piped that list in to sort and uniq -c and that counts the unique IP addresses and the number of times that IP address shows up in the PCAP list.

In the example above we only looked at one field, but what if you want to see more than one field within a packet?  Well that’s pretty easy as well, just add multiple -e flags with all the fields you want to see.  So for example if you wanted to see the source IP, source port, destination IP and destination port all together you would run something like this:

$ sudo tshark -r http.pcap -T fields -e ip.src -e tcp.srcport -e ip.dst -e tcp.dstport










