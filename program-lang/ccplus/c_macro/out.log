

# =====0====

b'EVAL\r\n'
 # ------1----------
b'EVAL (\r\n'
 # ------2----------
b'EVAL ( REPEAT ( 8 , M , ~ )\r\n'
 # ------3----------
b'EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------4----------
b'EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------5----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------6----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------7----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------8----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------9----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------10----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------11----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------12----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------13----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------14----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------15----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------16----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------17----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------18----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------19----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------20----------


# =====0====

b'EVAL\r\n'
 # ------1----------
b'EVAL (\r\n'
 # ------2----------
b'EVAL ( REPEAT ( 8 , M , ~ )\r\n'
 # ------3----------
b'EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------4----------
b'EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------5----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------6----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------7----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------8----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------9----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------10----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------11----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------12----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------13----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------14----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------15----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------16----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------17----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------18----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------19----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------20----------
b'EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )\r\n'
 # ------21----------


=====0====

[repeat.c:13:6  EVAL]   REPEAT ( 8 , M , ~
------1----------
[repeat.c:13:6  EVAL]   WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------2----------
[repeat.c:13:6  EVAL]   WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------3----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------4----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------5----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------6----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------7----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------8----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------9----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------10----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------11----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------12----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------13----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ )
------14----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ )
------15----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ )
------16----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ )
------17----------
[repeat.c:13:6  EVAL]   IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ )
------18----------


=====0====

EVAL

------1----------
EVAL (

------2----------
EVAL ( REPEAT ( 8 , M , ~ )

------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------4----------


=====0====


------0----------
EVAL

------1----------
EVAL (

------2----------
EVAL ( REPEAT ( 8 , M , ~ )

------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------7----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

------8----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )

#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------7----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------8----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------9----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------10----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------11----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------12----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------13----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------14----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------15----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------16----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------17----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------18----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------19----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------20----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )

#------21----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------22----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------23----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------24----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))

#------25----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))

#------26----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))


#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )

#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------7----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------8----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------9----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------10----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------11----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------12----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------13----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------14----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------15----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------16----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------17----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------18----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------19----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------20----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )

#------21----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------22----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------23----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------24----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))

#------25----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))

#------26----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))


#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )

#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------7----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------8----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------9----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------10----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------11----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------12----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------13----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------14----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------15----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------16----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------17----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

#------18----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------19----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

#------20----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )

#------21----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------22----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------23----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

#------24----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))
#------25----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))

#------26----------
EVAL(IF(8)(EXPAND, EAT)(REPEAT_INDIRECT EMPTY()()(DEC(8), M, ~)
                            M EMPTY()(DEC(8), ~)))


#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )

#------3----------
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

#------3----------
EVAL ( REPEAT ( 8 , M , ~ )

#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


#=====0====



#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )


#=====0====


#------0----------
EVAL

#------1----------
EVAL (

#------2----------
EVAL ( REPEAT ( 8 , M , ~ )

#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


#=====0====


#------0----------
EVAL
 )
#------1----------
EVAL (
 )
#------2----------
EVAL ( REPEAT ( 8 , M , ~ )
 )
#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )
#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )

#=====0====


#------0----------
EVAL
 ))
#------1----------
EVAL (
 ))
#------2----------
EVAL ( REPEAT ( 8 , M , ~ )
 ))
#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 ))
#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 ))
#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 ))
#------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 ))

#=====0====


#------0----------
EVAL
 )))))
#------1----------
EVAL (
 )))))
#------2----------
EVAL ( REPEAT ( 8 , M , ~ )
 )))))
#------3----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
#------4----------
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
#------5----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
#------6----------
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL
 )))))
# 1 ---NEW ENTRY---
EVAL (
 )))))
# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )
 )))))
# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 11 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 12 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 13 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 14 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 15 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 16 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )
 )))))

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL
 \)\)\)\)\)
# 1 ---NEW ENTRY---
EVAL (
 \)\)\)\)\)
# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )
 \)\)\)\)\)
# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 \)\)\)\)\)
# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 \)\)\)\)\)

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL
 )))))
# 1 ---NEW ENTRY---
EVAL (
 )))))
# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )
 )))))
# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))
# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )
 )))))

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL )))))
# 1 ---NEW ENTRY---
EVAL ( )))))
# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ ) )))))
# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))
# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))
# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---EVAL )))))
# 1 ---NEW ENTRY---EVAL ( )))))
# 2 ---NEW ENTRY---EVAL ( REPEAT ( 8 , M , ~ ) )))))
# 3 ---NEW ENTRY---EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))
# 4 ---NEW ENTRY---EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))
# 5 ---NEW ENTRY---EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))

# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---EVAL )))))

# 1 ---NEW ENTRY---EVAL ( )))))


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL )))))

# 1 ---NEW ENTRY---
EVAL ( )))))

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ ) )))))

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) ) )))))


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL))))

# 1 ---NEW ENTRY---
EVAL ())))

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )))))

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )))))


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 11 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 12 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 13 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 11 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 12 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 13 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 14 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 15 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 16 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

# 17 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

# 18 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

# 19 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

# 20 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )

# 21 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

# 22 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

# 23 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 11 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 0 ---NEW ENTRY---
EVAL

# 1 ---NEW ENTRY---
EVAL (

# 2 ---NEW ENTRY---
EVAL ( REPEAT ( 8 , M , ~ )

# 3 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 4 ---NEW ENTRY---
EVAL ( WHEN ( 8 ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 5 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 6 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 7 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( OBSTRUCT ( REPEAT_INDIRECT ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 8 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 9 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT DEFER ( EMPTY ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 10 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 11 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY EMPTY ( ) ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 12 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY   ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 13 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 14 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 15 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) OBSTRUCT ( M ) ( DEC ( 8 ) , ~ ) )

# 16 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

# 17 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M DEFER ( EMPTY ) ( ) ( DEC ( 8 ) , ~ ) )

# 18 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

# 19 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY EMPTY ( ) ( ) ( DEC ( 8 ) , ~ ) )

# 20 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY   ( ) ( DEC ( 8 ) , ~ ) )

# 21 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

# 22 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

# 23 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) )

# 24 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) ) )

# 25 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) ) ) 

# 26 ---NEW ENTRY---
EVAL ( IF ( 8 ) ( EXPAND , EAT ) ( REPEAT_INDIRECT EMPTY ( ) ( ) ( DEC ( 8 ) , M , ~ ) M EMPTY ( ) ( DEC ( 8 ) , ~ ) ) ) 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
char

# 1 ---NEW ENTRY---
char *

# 2 ---NEW ENTRY---
char * h1

# 3 ---NEW ENTRY---
char * h1 =

# 4 ---NEW ENTRY---
char * h1 = STR ( hello )

# 5 ---NEW ENTRY---
char * h1 = QUOTE ( hello )

# 6 ---NEW ENTRY---
char * h1 = QUOTE ( hello )

# 7 ---NEW ENTRY---
char * h1 = "hello"

# 8 ---NEW ENTRY---
char * h1 = "hello"

# 9 ---NEW ENTRY---
char * h1 = "hello"

# 10 ---NEW ENTRY---
char * h1 = "hello" ;

# 11 ---NEW ENTRY---
char * h1 = "hello" ; 

# 12 ---NEW ENTRY---
char * h1 = "hello" ; 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
char

# 1 ---NEW ENTRY---
char *

# 2 ---NEW ENTRY---
char * h1

# 3 ---NEW ENTRY---
char * h1 =

# 4 ---NEW ENTRY---
char * h1 = QUOTE ( hello )

# 5 ---NEW ENTRY---
char * h1 = "hello"

# 6 ---NEW ENTRY---
char * h1 = "hello"

# 7 ---NEW ENTRY---
char * h1 = "hello" ;

# 8 ---NEW ENTRY---
char * h1 = "hello" ; 

# 9 ---NEW ENTRY---
char * h1 = "hello" ; 

# 10 ---NEW ENTRY---
char * h1 = "hello" ; 

# 11 ---NEW ENTRY---
char * h1 = "hello" ; 

# 12 ---NEW ENTRY---
char * h1 = "hello" ; 

# 13 ---NEW ENTRY---
char * h1 = "hello" ; 

# 14 ---NEW ENTRY---
char * h1 = "hello" ; 

# 15 ---NEW ENTRY---
char * h1 = "hello" ; 

# 16 ---NEW ENTRY---
char * h1 = "hello" ; 

# 17 ---NEW ENTRY---
char * h1 = "hello" ; 

# 18 ---NEW ENTRY---
char * h1 = "hello" ; 

# 19 ---NEW ENTRY---
char * h1 = "hello" ; 

# 20 ---NEW ENTRY---
char * h1 = "hello" ; 

# 21 ---NEW ENTRY---
char * h1 = "hello" ; 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 13 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 14 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 15 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 15 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 16 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 17 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 18 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 19 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 20 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 21 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 22 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 23 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 24 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 25 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 26 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 27 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP   ( ) ( GREET , Adam , Joe ) ) )

# 28 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) )

# 29 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) )

# 30 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 31 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 32 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 33 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 34 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 35 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 36 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 37 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! GREET ( Adam ) DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 38 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! GREET ( Adam ) DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 39 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 40 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 41 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 42 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP EMPTY ( ) ( ) ( GREET , Joe ) ) ) )

# 43 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP EMPTY ( ) ( ) ( GREET , Joe ) ) ) )

# 44 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP   ( ) ( GREET , Joe ) ) ) )

# 45 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) )

# 46 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) )

# 47 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) ) )

# 48 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) ) )

# 49 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) ) )

# 50 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! _MAP ( ) ( GREET , Joe ) ) ) ) )

# 51 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! MAP ( GREET , Joe ) ) ) ) )

# 52 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! MAP ( GREET , Joe ) ) ) ) )

# 53 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! MAP ( GREET , Joe ) ) ) ) )

# 54 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! GREET ( Joe ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) ) )

# 55 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! GREET ( Joe ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) ) )

# 56 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) ) )

# 57 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) ) )

# 58 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) ) )

# 59 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) ) )

# 60 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) ) )

# 61 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP   ( ) ( GREET , ) ) ) ) )

# 62 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP ( ) ( GREET , ) ) ) ) )

# 63 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP ( ) ( GREET , ) ) ) ) )

# 64 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP ( ) ( GREET , ) ) ) )

# 65 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! _MAP ( ) ( GREET , ) ) ) )

# 66 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! MAP ( GREET , ) ) ) )

# 67 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! MAP ( GREET , ) ) ) )

# 68 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! MAP ( GREET , ) ) ) )

# 69 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 70 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 71 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 72 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 73 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 74 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 75 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 76 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP   ( ) ( GREET , ) ) ) )

# 77 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 78 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 79 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 80 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 81 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 82 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! MAP ( GREET , ) ) )

# 83 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! MAP ( GREET , ) ) )

# 84 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! MAP ( GREET , ) ) )

# 85 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 86 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 87 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 88 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 89 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 90 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 91 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 92 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) )

# 93 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 94 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 95 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 96 ---NEW ENTRY---
EVAL4 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 97 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 98 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 99 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 100 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 101 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 102 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 103 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 104 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 105 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 106 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 107 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 108 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 109 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 110 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 111 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) ) )

# 112 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 113 ---NEW ENTRY---
EVAL4 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 114 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 115 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 116 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 117 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 118 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 119 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 120 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 121 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 122 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 123 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 124 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 125 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 126 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) )

# 127 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 128 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 129 ---NEW ENTRY---
EVAL4 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 130 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 131 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 132 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 133 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 134 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 135 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 136 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 137 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 138 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 139 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 140 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 141 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 142 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) )

# 143 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 144 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 145 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 146 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 147 ---NEW ENTRY---
EVAL4 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 148 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 149 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 150 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 151 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 152 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 153 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 154 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 155 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 156 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 157 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 158 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 159 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 160 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 161 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 162 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) )

# 163 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 164 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 165 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 166 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 167 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 168 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 169 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 170 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 171 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) ) )

# 172 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 173 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 174 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 175 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 176 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) ) )

# 177 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 178 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) ) )

# 179 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) ) )

# 180 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 181 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) ) )

# 182 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 183 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 184 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 185 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 186 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 187 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 188 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 189 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 190 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 191 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 192 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 193 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 194 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) )

# 195 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 196 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 197 ---NEW ENTRY---
EVAL2 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 198 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 199 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 200 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 201 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 202 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 203 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 204 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 205 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 206 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 207 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 208 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 209 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 210 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) )

# 211 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 212 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 213 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 214 ---NEW ENTRY---
EVAL2 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 215 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 216 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 217 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 218 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 219 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 220 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 221 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) ) )

# 222 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 223 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 224 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 225 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 226 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) ) )

# 227 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 228 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) ) )

# 229 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) ) )

# 230 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 231 ---NEW ENTRY---
EVAL1 ( EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) ) )

# 232 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 233 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 234 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 235 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 236 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , ) )

# 237 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 238 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 239 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 240 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 241 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , ) )

# 242 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 243 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , ) )

# 244 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , ) )

# 245 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 246 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 247 ---NEW ENTRY---
EVAL1 ( Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) )

# 248 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 249 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 250 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , )

# 251 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , )

# 252 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! MAP ( GREET , )

# 253 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , )

# 254 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! GREET ( ) DEFER1 ( _MAP ) ( ) ( GREET , )

# 255 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , )

# 256 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , )

# 257 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! DEFER1 ( _MAP ) ( ) ( GREET , )

# 258 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , )

# 259 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP EMPTY ( ) ( ) ( GREET , )

# 260 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP   ( ) ( GREET , )

# 261 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 262 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 263 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 264 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 265 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 266 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , )

# 267 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) 

# 268 ---NEW ENTRY---
Hello , Mum ! Hello , Dad ! Hello , Adam ! Hello , Joe ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! Hello , ! _MAP ( ) ( GREET , ) 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 13 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 13 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 14 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 14 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 15 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 15 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 16 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 16 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 17 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 17 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 18 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 19 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 20 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 21 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 22 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 23 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 24 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 25 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 26 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 27 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 28 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 29 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 30 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 30 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 31 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 32 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP   ( ) ( GREET , Adam , Joe ) ) )

# 33 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) )

# 34 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) )

# 35 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 36 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 37 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 38 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 39 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 40 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 41 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! MAP ( GREET , Adam , Joe ) ) ) )

# 42 ---NEW ENTRY---
EVAL4 ( EVAL2 ( EVAL2 ( Hello , Mum ! Hello , Dad ! GREET ( Adam ) DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL8 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 13 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 14 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 15 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 16 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 17 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )

# 18 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hello , Mum ! MAP ( GREET , Dad , Adam , Joe ) ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; Hi ( Joe ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; _MAP ( ) ( GREET , ) 

# 5 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>
process-status:
    called,exanded,rescanned,lexed

# 5 ---NEW ENTRY---
Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; Hi ( Joe ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; _MAP ( ) ( GREET , ) 


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---

wilson:continue
# 0 ---NEW ENTRY---
Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; Hi ( Joe ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; _MAP ( ) ( GREET , ) 


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  

color explained:
    white   -   a
    yellow  -   a
    blue    -   a

# 2 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 13 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 14 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 15 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 16 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 17 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 18 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 19 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 20 ---NEW ENTRY---
EVAL4 ( EVAL4 ( Hi ( Mum ) ; GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; Hi ( Joe ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; _MAP ( ) ( GREET , ) 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL8 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL8 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL8 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; Hi ( Joe ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; Hi ( ) ; _MAP ( ) ( GREET , ) 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Done

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 12 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 13 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 12 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 13 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 14 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 15 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) ) )

# 16 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 17 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 18 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; MAP ( GREET , Dad , Adam , Joe ) ) )

# 19 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 20 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; GREET ( Dad ) DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 21 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 22 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 23 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; DEFER1 ( _MAP ) ( ) ( GREET , Adam , Joe ) ) )

# 24 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 25 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP EMPTY ( ) ( ) ( GREET , Adam , Joe ) ) )

# 26 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP   ( ) ( GREET , Adam , Joe ) ) )

# 27 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) )

# 28 ---NEW ENTRY---
EVAL2 ( EVAL2 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) )

# 29 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 30 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 31 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 32 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; _MAP ( ) ( GREET , Adam , Joe ) ) ) )

# 33 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; MAP ( GREET , Adam , Joe ) ) ) )

# 34 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; MAP ( GREET , Adam , Joe ) ) ) )

# 35 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; MAP ( GREET , Adam , Joe ) ) ) )

# 36 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; GREET ( Adam ) DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 37 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; GREET ( Adam ) DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 38 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 39 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 40 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; DEFER1 ( _MAP ) ( ) ( GREET , Joe ) ) ) )

# 41 ---NEW ENTRY---
EVAL2 ( EVAL1 ( EVAL1 ( Hi ( Mum ) ; Hi ( Dad ) ; Hi ( Adam ) ; _MAP EMPTY ( ) ( ) ( GREET , Joe ) ) ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Done

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Done

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 1 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Done

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 1 ---NEW ENTRY---
EVAL4 ( MAP ( GREET , Mum , Dad , Adam , Joe ) )

# 2 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 3 ---NEW ENTRY---
EVAL4 ( GREET ( Mum ) DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 4 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 5 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 6 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; DEFER1 ( _MAP ) ( ) ( GREET , Dad , Adam , Joe ) )

# 7 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 8 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP EMPTY ( ) ( ) ( GREET , Dad , Adam , Joe ) )

# 9 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP   ( ) ( GREET , Dad , Adam , Joe ) )

# 10 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )

# 11 ---NEW ENTRY---
EVAL4 ( Hi ( Mum ) ; _MAP ( ) ( GREET , Dad , Adam , Joe ) )


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct

# 1 ---NEW ENTRY---
struct wad_print_helper

# 2 ---NEW ENTRY---
struct wad_print_helper {

# 3 ---NEW ENTRY---
struct wad_print_helper { 

# 4 ---NEW ENTRY---
struct wad_print_helper { 

# 5 ---NEW ENTRY---
struct wad_print_helper { 

# 6 ---NEW ENTRY---
struct wad_print_helper { 

# 7 ---NEW ENTRY---
struct wad_print_helper { 

# 8 ---NEW ENTRY---
struct wad_print_helper { 

# 9 ---NEW ENTRY---
struct wad_print_helper { 

# 10 ---NEW ENTRY---
struct wad_print_helper { 

# 11 ---NEW ENTRY---
struct wad_print_helper { 

# 12 ---NEW ENTRY---
struct wad_print_helper { 

# 13 ---NEW ENTRY---
struct wad_print_helper { 

# 14 ---NEW ENTRY---
struct wad_print_helper { 

# 15 ---NEW ENTRY---
struct wad_print_helper { 

# 16 ---NEW ENTRY---
struct wad_print_helper { 

# 17 ---NEW ENTRY---
struct wad_print_helper { 

# 18 ---NEW ENTRY---
struct wad_print_helper { 

# 19 ---NEW ENTRY---
struct wad_print_helper { 

# 20 ---NEW ENTRY---
struct wad_print_helper { 

# 21 ---NEW ENTRY---
struct wad_print_helper { 

# 22 ---NEW ENTRY---
struct wad_print_helper { 

# 23 ---NEW ENTRY---
struct wad_print_helper { 

# 24 ---NEW ENTRY---
struct wad_print_helper { 

# 25 ---NEW ENTRY---
struct wad_print_helper { 

# 26 ---NEW ENTRY---
struct wad_print_helper { 

# 27 ---NEW ENTRY---
struct wad_print_helper { 

# 28 ---NEW ENTRY---
struct wad_print_helper { 

# 29 ---NEW ENTRY---
struct wad_print_helper { 

# 30 ---NEW ENTRY---
struct wad_print_helper { 

# 31 ---NEW ENTRY---
struct wad_print_helper { 

# 32 ---NEW ENTRY---
struct wad_print_helper { 

# 33 ---NEW ENTRY---
struct wad_print_helper { 

# 34 ---NEW ENTRY---
struct wad_print_helper { 

# 35 ---NEW ENTRY---
struct wad_print_helper { 

# 36 ---NEW ENTRY---
struct wad_print_helper { 

# 37 ---NEW ENTRY---
struct wad_print_helper { 

# 38 ---NEW ENTRY---
struct wad_print_helper { 

# 39 ---NEW ENTRY---
struct wad_print_helper { 

# 40 ---NEW ENTRY---
struct wad_print_helper { 

# 41 ---NEW ENTRY---
struct wad_print_helper { 

# 42 ---NEW ENTRY---
struct wad_print_helper { 

# 43 ---NEW ENTRY---
struct wad_print_helper { 

# 44 ---NEW ENTRY---
struct wad_print_helper { 

# 45 ---NEW ENTRY---
struct wad_print_helper { 

# 46 ---NEW ENTRY---
struct wad_print_helper { 

# 47 ---NEW ENTRY---
struct wad_print_helper { 

# 48 ---NEW ENTRY---
struct wad_print_helper { 

# 49 ---NEW ENTRY---
struct wad_print_helper { 

# 50 ---NEW ENTRY---
struct wad_print_helper { 

# 51 ---NEW ENTRY---
struct wad_print_helper { 

# 52 ---NEW ENTRY---
struct wad_print_helper { 

# 53 ---NEW ENTRY---
struct wad_print_helper { 

# 54 ---NEW ENTRY---
struct wad_print_helper { 

# 55 ---NEW ENTRY---
struct wad_print_helper { 

# 56 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct

# 1 ---NEW ENTRY---
struct wad_print_helper

# 2 ---NEW ENTRY---
struct wad_print_helper {

# 3 ---NEW ENTRY---
struct wad_print_helper { 

# 4 ---NEW ENTRY---
struct wad_print_helper { 

# 5 ---NEW ENTRY---
struct wad_print_helper { 

# 6 ---NEW ENTRY---
struct wad_print_helper { 

# 7 ---NEW ENTRY---
struct wad_print_helper { 

# 8 ---NEW ENTRY---
struct wad_print_helper { 

# 9 ---NEW ENTRY---
struct wad_print_helper { 

# 10 ---NEW ENTRY---
struct wad_print_helper { 

# 11 ---NEW ENTRY---
struct wad_print_helper { 

# 12 ---NEW ENTRY---
struct wad_print_helper { 

# 13 ---NEW ENTRY---
struct wad_print_helper { 

# 14 ---NEW ENTRY---
struct wad_print_helper { 

# 15 ---NEW ENTRY---
struct wad_print_helper { 

# 16 ---NEW ENTRY---
struct wad_print_helper { 

# 17 ---NEW ENTRY---
struct wad_print_helper { 

# 18 ---NEW ENTRY---
struct wad_print_helper { 

# 19 ---NEW ENTRY---
struct wad_print_helper { 

# 20 ---NEW ENTRY---
struct wad_print_helper { 

# 21 ---NEW ENTRY---
struct wad_print_helper { 

# 22 ---NEW ENTRY---
struct wad_print_helper { 

# 23 ---NEW ENTRY---
struct wad_print_helper { 

# 24 ---NEW ENTRY---
struct wad_print_helper { 

# 25 ---NEW ENTRY---
struct wad_print_helper { 

# 26 ---NEW ENTRY---
struct wad_print_helper { 

# 27 ---NEW ENTRY---
struct wad_print_helper { 

# 28 ---NEW ENTRY---
struct wad_print_helper { 

# 29 ---NEW ENTRY---
struct wad_print_helper { 

# 30 ---NEW ENTRY---
struct wad_print_helper { 

# 31 ---NEW ENTRY---
struct wad_print_helper { 

# 32 ---NEW ENTRY---
struct wad_print_helper { 

# 33 ---NEW ENTRY---
struct wad_print_helper { 

# 34 ---NEW ENTRY---
struct wad_print_helper { 

# 35 ---NEW ENTRY---
struct wad_print_helper { 

# 36 ---NEW ENTRY---
struct wad_print_helper { 

# 37 ---NEW ENTRY---
struct wad_print_helper { 

# 38 ---NEW ENTRY---
struct wad_print_helper { 

# 39 ---NEW ENTRY---
struct wad_print_helper { 

# 40 ---NEW ENTRY---
struct wad_print_helper { 

# 41 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct

# 1 ---NEW ENTRY---
struct wad_print_helper

# 2 ---NEW ENTRY---
struct wad_print_helper {

# 3 ---NEW ENTRY---
struct wad_print_helper { 

# 4 ---NEW ENTRY---
struct wad_print_helper { 

# 5 ---NEW ENTRY---
struct wad_print_helper { 

# 6 ---NEW ENTRY---
struct wad_print_helper { 

# 7 ---NEW ENTRY---
struct wad_print_helper { 

# 8 ---NEW ENTRY---
struct wad_print_helper { 

# 9 ---NEW ENTRY---
struct wad_print_helper { 

# 10 ---NEW ENTRY---
struct wad_print_helper { 

# 11 ---NEW ENTRY---
struct wad_print_helper { 

# 12 ---NEW ENTRY---
struct wad_print_helper { 

# 13 ---NEW ENTRY---
struct wad_print_helper { 

# 14 ---NEW ENTRY---
struct wad_print_helper { 

# 15 ---NEW ENTRY---
struct wad_print_helper { 

# 16 ---NEW ENTRY---
struct wad_print_helper { 

# 17 ---NEW ENTRY---
struct wad_print_helper { 

# 18 ---NEW ENTRY---
struct wad_print_helper { 

# 19 ---NEW ENTRY---
struct wad_print_helper { 

# 20 ---NEW ENTRY---
struct wad_print_helper { 

# 21 ---NEW ENTRY---
struct wad_print_helper { 

# 22 ---NEW ENTRY---
struct wad_print_helper { 

# 23 ---NEW ENTRY---
struct wad_print_helper { 

# 24 ---NEW ENTRY---
struct wad_print_helper { 

# 25 ---NEW ENTRY---
struct wad_print_helper { 

# 26 ---NEW ENTRY---
struct wad_print_helper { 

# 27 ---NEW ENTRY---
struct wad_print_helper { 

# 28 ---NEW ENTRY---
struct wad_print_helper { 

# 29 ---NEW ENTRY---
struct wad_print_helper { 

# 30 ---NEW ENTRY---
struct wad_print_helper { 

# 31 ---NEW ENTRY---
struct wad_print_helper { 

# 32 ---NEW ENTRY---
struct wad_print_helper { 

# 33 ---NEW ENTRY---
struct wad_print_helper { 

# 34 ---NEW ENTRY---
struct wad_print_helper { 

# 35 ---NEW ENTRY---
struct wad_print_helper { 

# 36 ---NEW ENTRY---
struct wad_print_helper { 

# 37 ---NEW ENTRY---
struct wad_print_helper { 

# 38 ---NEW ENTRY---
struct wad_print_helper { 

# 39 ---NEW ENTRY---
struct wad_print_helper { 

# 40 ---NEW ENTRY---
struct wad_print_helper { 

# 41 ---NEW ENTRY---
struct wad_print_helper { 

# 42 ---NEW ENTRY---
struct wad_print_helper { 

# 43 ---NEW ENTRY---
struct wad_print_helper { 

# 44 ---NEW ENTRY---
struct wad_print_helper { 

# 45 ---NEW ENTRY---
struct wad_print_helper { 

# 46 ---NEW ENTRY---
struct wad_print_helper { 

# 47 ---NEW ENTRY---
struct wad_print_helper { 

# 48 ---NEW ENTRY---
struct wad_print_helper { 

# 49 ---NEW ENTRY---
struct wad_print_helper { 

# 50 ---NEW ENTRY---
struct wad_print_helper { 

# 51 ---NEW ENTRY---
struct wad_print_helper { 

# 52 ---NEW ENTRY---
struct wad_print_helper { 

# 53 ---NEW ENTRY---
struct wad_print_helper { 

# 54 ---NEW ENTRY---
struct wad_print_helper { 

# 55 ---NEW ENTRY---
struct wad_print_helper { 

# 56 ---NEW ENTRY---
struct wad_print_helper { 

# 57 ---NEW ENTRY---
struct wad_print_helper { 

# 58 ---NEW ENTRY---
struct wad_print_helper { 

# 59 ---NEW ENTRY---
struct wad_print_helper { 

# 60 ---NEW ENTRY---
struct wad_print_helper { 

# 61 ---NEW ENTRY---
struct wad_print_helper { 

# 62 ---NEW ENTRY---
struct wad_print_helper { 

# 63 ---NEW ENTRY---
struct wad_print_helper { 

# 64 ---NEW ENTRY---
struct wad_print_helper { 

# 65 ---NEW ENTRY---
struct wad_print_helper { 

# 66 ---NEW ENTRY---
struct wad_print_helper { 

# 67 ---NEW ENTRY---
struct wad_print_helper { 

# 68 ---NEW ENTRY---
struct wad_print_helper { 

# 69 ---NEW ENTRY---
struct wad_print_helper { 

# 70 ---NEW ENTRY---
struct wad_print_helper { 

# 71 ---NEW ENTRY---
struct wad_print_helper { 

# 72 ---NEW ENTRY---
struct wad_print_helper { 

# 73 ---NEW ENTRY---
struct wad_print_helper { 

# 74 ---NEW ENTRY---
struct wad_print_helper { 

# 75 ---NEW ENTRY---
struct wad_print_helper { 

# 76 ---NEW ENTRY---
struct wad_print_helper { 

# 77 ---NEW ENTRY---
struct wad_print_helper { 

# 78 ---NEW ENTRY---
struct wad_print_helper { 

# 79 ---NEW ENTRY---
struct wad_print_helper { 

# 80 ---NEW ENTRY---
struct wad_print_helper { 

# 81 ---NEW ENTRY---
struct wad_print_helper { 

# 82 ---NEW ENTRY---
struct wad_print_helper { 

# 83 ---NEW ENTRY---
struct wad_print_helper { 

# 84 ---NEW ENTRY---
struct wad_print_helper { 

# 85 ---NEW ENTRY---
struct wad_print_helper { 

# 86 ---NEW ENTRY---
struct wad_print_helper { 

# 87 ---NEW ENTRY---
struct wad_print_helper { 

# 88 ---NEW ENTRY---
struct wad_print_helper { 

# 89 ---NEW ENTRY---
struct wad_print_helper { 

# 90 ---NEW ENTRY---
struct wad_print_helper { 

# 91 ---NEW ENTRY---
struct wad_print_helper { 

# 92 ---NEW ENTRY---
struct wad_print_helper { 

# 93 ---NEW ENTRY---
struct wad_print_helper { 

# 94 ---NEW ENTRY---
struct wad_print_helper { 

# 95 ---NEW ENTRY---
struct wad_print_helper { 

# 96 ---NEW ENTRY---
struct wad_print_helper { 

# 97 ---NEW ENTRY---
struct wad_print_helper { 

# 98 ---NEW ENTRY---
struct wad_print_helper { 

# 99 ---NEW ENTRY---
struct wad_print_helper { 

# 100 ---NEW ENTRY---
struct wad_print_helper { 

# 101 ---NEW ENTRY---
struct wad_print_helper { 

# 102 ---NEW ENTRY---
struct wad_print_helper { 

# 103 ---NEW ENTRY---
struct wad_print_helper { 

# 104 ---NEW ENTRY---
struct wad_print_helper { 

# 105 ---NEW ENTRY---
struct wad_print_helper { 

# 106 ---NEW ENTRY---
struct wad_print_helper { 

# 107 ---NEW ENTRY---
struct wad_print_helper { 

# 108 ---NEW ENTRY---
struct wad_print_helper { 

# 109 ---NEW ENTRY---
struct wad_print_helper { 

# 110 ---NEW ENTRY---
struct wad_print_helper { 

# 111 ---NEW ENTRY---
struct wad_print_helper { 

# 112 ---NEW ENTRY---
struct wad_print_helper { 

# 113 ---NEW ENTRY---
struct wad_print_helper { 

# 114 ---NEW ENTRY---
struct wad_print_helper { 

# 115 ---NEW ENTRY---
struct wad_print_helper { 

# 116 ---NEW ENTRY---
struct wad_print_helper { 

# 117 ---NEW ENTRY---
struct wad_print_helper { 

# 118 ---NEW ENTRY---
struct wad_print_helper { 

# 119 ---NEW ENTRY---
struct wad_print_helper { 

# 120 ---NEW ENTRY---
struct wad_print_helper { 

# 121 ---NEW ENTRY---
struct wad_print_helper { 

# 122 ---NEW ENTRY---
struct wad_print_helper { 

# 123 ---NEW ENTRY---
struct wad_print_helper { 

# 124 ---NEW ENTRY---
struct wad_print_helper { 

# 125 ---NEW ENTRY---
struct wad_print_helper { 

# 126 ---NEW ENTRY---
struct wad_print_helper { 

# 127 ---NEW ENTRY---
struct wad_print_helper { 

# 128 ---NEW ENTRY---
struct wad_print_helper { 

# 129 ---NEW ENTRY---
struct wad_print_helper { 

# 130 ---NEW ENTRY---
struct wad_print_helper { 

# 131 ---NEW ENTRY---
struct wad_print_helper { 

# 132 ---NEW ENTRY---
struct wad_print_helper { 

# 133 ---NEW ENTRY---
struct wad_print_helper { 

# 134 ---NEW ENTRY---
struct wad_print_helper { 

# 135 ---NEW ENTRY---
struct wad_print_helper { 

# 136 ---NEW ENTRY---
struct wad_print_helper { 

# 137 ---NEW ENTRY---
struct wad_print_helper { 

# 138 ---NEW ENTRY---
struct wad_print_helper { 

# 139 ---NEW ENTRY---
struct wad_print_helper { 

# 140 ---NEW ENTRY---
struct wad_print_helper { 

# 141 ---NEW ENTRY---
struct wad_print_helper { 

# 142 ---NEW ENTRY---
struct wad_print_helper { 

# 143 ---NEW ENTRY---
struct wad_print_helper { 

# 144 ---NEW ENTRY---
struct wad_print_helper { 

# 145 ---NEW ENTRY---
struct wad_print_helper { 

# 146 ---NEW ENTRY---
struct wad_print_helper { 

# 147 ---NEW ENTRY---
struct wad_print_helper { 

# 148 ---NEW ENTRY---
struct wad_print_helper { 

# 149 ---NEW ENTRY---
struct wad_print_helper { 

# 150 ---NEW ENTRY---
struct wad_print_helper { 

# 151 ---NEW ENTRY---
struct wad_print_helper { 

# 152 ---NEW ENTRY---
struct wad_print_helper { 

# 153 ---NEW ENTRY---
struct wad_print_helper { 

# 154 ---NEW ENTRY---
struct wad_print_helper { 

# 155 ---NEW ENTRY---
struct wad_print_helper { 

# 156 ---NEW ENTRY---
struct wad_print_helper { 

# 157 ---NEW ENTRY---
struct wad_print_helper { 

# 158 ---NEW ENTRY---
struct wad_print_helper { 

# 159 ---NEW ENTRY---
struct wad_print_helper { 

# 160 ---NEW ENTRY---
struct wad_print_helper { 

# 161 ---NEW ENTRY---
struct wad_print_helper { 

# 162 ---NEW ENTRY---
struct wad_print_helper { 

# 163 ---NEW ENTRY---
struct wad_print_helper { 

# 164 ---NEW ENTRY---
struct wad_print_helper { 

# 165 ---NEW ENTRY---
struct wad_print_helper { 

# 166 ---NEW ENTRY---
struct wad_print_helper { 

# 167 ---NEW ENTRY---
struct wad_print_helper { 

# 168 ---NEW ENTRY---
struct wad_print_helper { 

# 169 ---NEW ENTRY---
struct wad_print_helper { 

# 170 ---NEW ENTRY---
struct wad_print_helper { 

# 171 ---NEW ENTRY---
struct wad_print_helper { 

# 172 ---NEW ENTRY---
struct wad_print_helper { 

# 173 ---NEW ENTRY---
struct wad_print_helper { 

# 174 ---NEW ENTRY---
struct wad_print_helper { 

# 175 ---NEW ENTRY---
struct wad_print_helper { 

# 176 ---NEW ENTRY---
struct wad_print_helper { 

# 177 ---NEW ENTRY---
struct wad_print_helper { 

# 178 ---NEW ENTRY---
struct wad_print_helper { 

# 179 ---NEW ENTRY---
struct wad_print_helper { 

# 180 ---NEW ENTRY---
struct wad_print_helper { 

# 181 ---NEW ENTRY---
struct wad_print_helper { 

# 182 ---NEW ENTRY---
struct wad_print_helper { 

# 183 ---NEW ENTRY---
struct wad_print_helper { 

# 184 ---NEW ENTRY---
struct wad_print_helper { 

# 185 ---NEW ENTRY---
struct wad_print_helper { 

# 186 ---NEW ENTRY---
struct wad_print_helper { 

# 187 ---NEW ENTRY---
struct wad_print_helper { 

# 188 ---NEW ENTRY---
struct wad_print_helper { 

# 189 ---NEW ENTRY---
struct wad_print_helper { 

# 190 ---NEW ENTRY---
struct wad_print_helper { 

# 191 ---NEW ENTRY---
struct wad_print_helper { 

# 192 ---NEW ENTRY---
struct wad_print_helper { 

# 193 ---NEW ENTRY---
struct wad_print_helper { 

# 194 ---NEW ENTRY---
struct wad_print_helper { 

# 195 ---NEW ENTRY---
struct wad_print_helper { 

# 196 ---NEW ENTRY---
struct wad_print_helper { 

# 197 ---NEW ENTRY---
struct wad_print_helper { 

# 198 ---NEW ENTRY---
struct wad_print_helper { 

# 199 ---NEW ENTRY---
struct wad_print_helper { 

# 200 ---NEW ENTRY---
struct wad_print_helper { 

# 201 ---NEW ENTRY---
struct wad_print_helper { 

# 202 ---NEW ENTRY---
struct wad_print_helper { 

# 203 ---NEW ENTRY---
struct wad_print_helper { 

# 204 ---NEW ENTRY---
struct wad_print_helper { 

# 205 ---NEW ENTRY---
struct wad_print_helper { 

# 206 ---NEW ENTRY---
struct wad_print_helper { 

# 207 ---NEW ENTRY---
struct wad_print_helper { 

# 208 ---NEW ENTRY---
struct wad_print_helper { 

# 209 ---NEW ENTRY---
struct wad_print_helper { 

# 210 ---NEW ENTRY---
struct wad_print_helper { 

# 211 ---NEW ENTRY---
struct wad_print_helper { 

# 212 ---NEW ENTRY---
struct wad_print_helper { 

# 213 ---NEW ENTRY---
struct wad_print_helper { 

# 214 ---NEW ENTRY---
struct wad_print_helper { 

# 215 ---NEW ENTRY---
struct wad_print_helper { 

# 216 ---NEW ENTRY---
struct wad_print_helper { 

# 217 ---NEW ENTRY---
struct wad_print_helper { 

# 218 ---NEW ENTRY---
struct wad_print_helper { 

# 219 ---NEW ENTRY---
struct wad_print_helper { 

# 220 ---NEW ENTRY---
struct wad_print_helper { 

# 221 ---NEW ENTRY---
struct wad_print_helper { 

# 222 ---NEW ENTRY---
struct wad_print_helper { 

# 223 ---NEW ENTRY---
struct wad_print_helper { 

# 224 ---NEW ENTRY---
struct wad_print_helper { 

# 225 ---NEW ENTRY---
struct wad_print_helper { 

# 226 ---NEW ENTRY---
struct wad_print_helper { 

# 227 ---NEW ENTRY---
struct wad_print_helper { 

# 228 ---NEW ENTRY---
struct wad_print_helper { 

# 229 ---NEW ENTRY---
struct wad_print_helper { 

# 230 ---NEW ENTRY---
struct wad_print_helper { 

# 231 ---NEW ENTRY---
struct wad_print_helper { 

# 232 ---NEW ENTRY---
struct wad_print_helper { 

# 233 ---NEW ENTRY---
struct wad_print_helper { 

# 234 ---NEW ENTRY---
struct wad_print_helper { 

# 235 ---NEW ENTRY---
struct wad_print_helper { 

# 236 ---NEW ENTRY---
struct wad_print_helper { 

# 237 ---NEW ENTRY---
struct wad_print_helper { 

# 238 ---NEW ENTRY---
struct wad_print_helper { 

# 239 ---NEW ENTRY---
struct wad_print_helper { 

# 240 ---NEW ENTRY---
struct wad_print_helper { 

# 241 ---NEW ENTRY---
struct wad_print_helper { 

# 242 ---NEW ENTRY---
struct wad_print_helper { 

# 243 ---NEW ENTRY---
struct wad_print_helper { 

# 244 ---NEW ENTRY---
struct wad_print_helper { 

# 245 ---NEW ENTRY---
struct wad_print_helper { 

# 246 ---NEW ENTRY---
struct wad_print_helper { 

# 247 ---NEW ENTRY---
struct wad_print_helper { 

# 248 ---NEW ENTRY---
struct wad_print_helper { 

# 249 ---NEW ENTRY---
struct wad_print_helper { 

# 250 ---NEW ENTRY---
struct wad_print_helper { 

# 251 ---NEW ENTRY---
struct wad_print_helper { 

# 252 ---NEW ENTRY---
struct wad_print_helper { 

# 253 ---NEW ENTRY---
struct wad_print_helper { 

# 254 ---NEW ENTRY---
struct wad_print_helper { 

# 255 ---NEW ENTRY---
struct wad_print_helper { 

# 256 ---NEW ENTRY---
struct wad_print_helper { 

# 257 ---NEW ENTRY---
struct wad_print_helper { 

# 258 ---NEW ENTRY---
struct wad_print_helper { 

# 259 ---NEW ENTRY---
struct wad_print_helper { 

# 260 ---NEW ENTRY---
struct wad_print_helper { 

# 261 ---NEW ENTRY---
struct wad_print_helper { 

# 262 ---NEW ENTRY---
struct wad_print_helper { 

# 263 ---NEW ENTRY---
struct wad_print_helper { 

# 264 ---NEW ENTRY---
struct wad_print_helper { 

# 265 ---NEW ENTRY---
struct wad_print_helper { 

# 266 ---NEW ENTRY---
struct wad_print_helper { 

# 267 ---NEW ENTRY---
struct wad_print_helper { 

# 268 ---NEW ENTRY---
struct wad_print_helper { 

# 269 ---NEW ENTRY---
struct wad_print_helper { 

# 270 ---NEW ENTRY---
struct wad_print_helper { 

# 271 ---NEW ENTRY---
struct wad_print_helper { 

# 272 ---NEW ENTRY---
struct wad_print_helper { 

# 273 ---NEW ENTRY---
struct wad_print_helper { 

# 274 ---NEW ENTRY---
struct wad_print_helper { 

# 275 ---NEW ENTRY---
struct wad_print_helper { 

# 276 ---NEW ENTRY---
struct wad_print_helper { 

# 277 ---NEW ENTRY---
struct wad_print_helper { 

# 278 ---NEW ENTRY---
struct wad_print_helper { 

# 279 ---NEW ENTRY---
struct wad_print_helper { 

# 280 ---NEW ENTRY---
struct wad_print_helper { 

# 281 ---NEW ENTRY---
struct wad_print_helper { 

# 282 ---NEW ENTRY---
struct wad_print_helper { 

# 283 ---NEW ENTRY---
struct wad_print_helper { 

# 284 ---NEW ENTRY---
struct wad_print_helper { 

# 285 ---NEW ENTRY---
struct wad_print_helper { 

# 286 ---NEW ENTRY---
struct wad_print_helper { 

# 287 ---NEW ENTRY---
struct wad_print_helper { 

# 288 ---NEW ENTRY---
struct wad_print_helper { 

# 289 ---NEW ENTRY---
struct wad_print_helper { 

# 290 ---NEW ENTRY---
struct wad_print_helper { 

# 291 ---NEW ENTRY---
struct wad_print_helper { 

# 292 ---NEW ENTRY---
struct wad_print_helper { 

# 293 ---NEW ENTRY---
struct wad_print_helper { 

# 294 ---NEW ENTRY---
struct wad_print_helper { 

# 295 ---NEW ENTRY---
struct wad_print_helper { 

# 296 ---NEW ENTRY---
struct wad_print_helper { 

# 297 ---NEW ENTRY---
struct wad_print_helper { 

# 298 ---NEW ENTRY---
struct wad_print_helper { 

# 299 ---NEW ENTRY---
struct wad_print_helper { 

# 300 ---NEW ENTRY---
struct wad_print_helper { 

# 301 ---NEW ENTRY---
struct wad_print_helper { 

# 302 ---NEW ENTRY---
struct wad_print_helper { 

# 303 ---NEW ENTRY---
struct wad_print_helper { 

# 304 ---NEW ENTRY---
struct wad_print_helper { 

# 305 ---NEW ENTRY---
struct wad_print_helper { 

# 306 ---NEW ENTRY---
struct wad_print_helper { 

# 307 ---NEW ENTRY---
struct wad_print_helper { 

# 308 ---NEW ENTRY---
struct wad_print_helper { 

# 309 ---NEW ENTRY---
struct wad_print_helper { 

# 310 ---NEW ENTRY---
struct wad_print_helper { 

# 311 ---NEW ENTRY---
struct wad_print_helper { 

# 312 ---NEW ENTRY---
struct wad_print_helper { 

# 313 ---NEW ENTRY---
struct wad_print_helper { 

# 314 ---NEW ENTRY---
struct wad_print_helper { 

# 315 ---NEW ENTRY---
struct wad_print_helper { 

# 316 ---NEW ENTRY---
struct wad_print_helper { 

# 317 ---NEW ENTRY---
struct wad_print_helper { 

# 318 ---NEW ENTRY---
struct wad_print_helper { 

# 319 ---NEW ENTRY---
struct wad_print_helper { 

# 320 ---NEW ENTRY---
struct wad_print_helper { 

# 321 ---NEW ENTRY---
struct wad_print_helper { 

# 322 ---NEW ENTRY---
struct wad_print_helper { 

# 323 ---NEW ENTRY---
struct wad_print_helper { 

# 324 ---NEW ENTRY---
struct wad_print_helper { 

# 325 ---NEW ENTRY---
struct wad_print_helper { 

# 326 ---NEW ENTRY---
struct wad_print_helper { 

# 327 ---NEW ENTRY---
struct wad_print_helper { 

# 328 ---NEW ENTRY---
struct wad_print_helper { 

# 329 ---NEW ENTRY---
struct wad_print_helper { 

# 330 ---NEW ENTRY---
struct wad_print_helper { 

# 331 ---NEW ENTRY---
struct wad_print_helper { 

# 332 ---NEW ENTRY---
struct wad_print_helper { 

# 333 ---NEW ENTRY---
struct wad_print_helper { 

# 334 ---NEW ENTRY---
struct wad_print_helper { 

# 335 ---NEW ENTRY---
struct wad_print_helper { 

# 336 ---NEW ENTRY---
struct wad_print_helper { 

# 337 ---NEW ENTRY---
struct wad_print_helper { 

# 338 ---NEW ENTRY---
struct wad_print_helper { 

# 339 ---NEW ENTRY---
struct wad_print_helper { 

# 340 ---NEW ENTRY---
struct wad_print_helper { 

# 341 ---NEW ENTRY---
struct wad_print_helper { 

# 342 ---NEW ENTRY---
struct wad_print_helper { 

# 343 ---NEW ENTRY---
struct wad_print_helper { 

# 344 ---NEW ENTRY---
struct wad_print_helper { 

# 345 ---NEW ENTRY---
struct wad_print_helper { 

# 346 ---NEW ENTRY---
struct wad_print_helper { 

# 347 ---NEW ENTRY---
struct wad_print_helper { 

# 348 ---NEW ENTRY---
struct wad_print_helper { 

# 349 ---NEW ENTRY---
struct wad_print_helper { 

# 350 ---NEW ENTRY---
struct wad_print_helper { 

# 351 ---NEW ENTRY---
struct wad_print_helper { 

# 352 ---NEW ENTRY---
struct wad_print_helper { 

# 353 ---NEW ENTRY---
struct wad_print_helper { 

# 354 ---NEW ENTRY---
struct wad_print_helper { 

# 355 ---NEW ENTRY---
struct wad_print_helper { 

# 356 ---NEW ENTRY---
struct wad_print_helper { 

# 357 ---NEW ENTRY---
struct wad_print_helper { 

# 358 ---NEW ENTRY---
struct wad_print_helper { 

# 359 ---NEW ENTRY---
struct wad_print_helper { 

# 360 ---NEW ENTRY---
struct wad_print_helper { 

# 361 ---NEW ENTRY---
struct wad_print_helper { 

# 362 ---NEW ENTRY---
struct wad_print_helper { 

# 363 ---NEW ENTRY---
struct wad_print_helper { 

# 364 ---NEW ENTRY---
struct wad_print_helper { 

# 365 ---NEW ENTRY---
struct wad_print_helper { 

# 366 ---NEW ENTRY---
struct wad_print_helper { 

# 367 ---NEW ENTRY---
struct wad_print_helper { 

# 368 ---NEW ENTRY---
struct wad_print_helper { 

# 369 ---NEW ENTRY---
struct wad_print_helper { 

# 370 ---NEW ENTRY---
struct wad_print_helper { 

# 371 ---NEW ENTRY---
struct wad_print_helper { 

# 372 ---NEW ENTRY---
struct wad_print_helper { 

# 373 ---NEW ENTRY---
struct wad_print_helper { 

# 374 ---NEW ENTRY---
struct wad_print_helper { 

# 375 ---NEW ENTRY---
struct wad_print_helper { 

# 376 ---NEW ENTRY---
struct wad_print_helper { 

# 377 ---NEW ENTRY---
struct wad_print_helper { 

# 378 ---NEW ENTRY---
struct wad_print_helper { 

# 379 ---NEW ENTRY---
struct wad_print_helper { 

# 380 ---NEW ENTRY---
struct wad_print_helper { 

# 381 ---NEW ENTRY---
struct wad_print_helper { 

# 382 ---NEW ENTRY---
struct wad_print_helper { 

# 383 ---NEW ENTRY---
struct wad_print_helper { 

# 384 ---NEW ENTRY---
struct wad_print_helper { 

# 385 ---NEW ENTRY---
struct wad_print_helper { 

# 386 ---NEW ENTRY---
struct wad_print_helper { 

# 387 ---NEW ENTRY---
struct wad_print_helper { 

# 388 ---NEW ENTRY---
struct wad_print_helper { 

# 389 ---NEW ENTRY---
struct wad_print_helper { 

# 390 ---NEW ENTRY---
struct wad_print_helper { 

# 391 ---NEW ENTRY---
struct wad_print_helper { 

# 392 ---NEW ENTRY---
struct wad_print_helper { 

# 393 ---NEW ENTRY---
struct wad_print_helper { 

# 394 ---NEW ENTRY---
struct wad_print_helper { 

# 395 ---NEW ENTRY---
struct wad_print_helper { 

# 396 ---NEW ENTRY---
struct wad_print_helper { 

# 397 ---NEW ENTRY---
struct wad_print_helper { 

# 398 ---NEW ENTRY---
struct wad_print_helper { 

# 399 ---NEW ENTRY---
struct wad_print_helper { 

# 400 ---NEW ENTRY---
struct wad_print_helper { 

# 401 ---NEW ENTRY---
struct wad_print_helper { 

# 402 ---NEW ENTRY---
struct wad_print_helper { 

# 403 ---NEW ENTRY---
struct wad_print_helper { 

# 404 ---NEW ENTRY---
struct wad_print_helper { 

# 405 ---NEW ENTRY---
struct wad_print_helper { 

# 406 ---NEW ENTRY---
struct wad_print_helper { 

# 407 ---NEW ENTRY---
struct wad_print_helper { 

# 408 ---NEW ENTRY---
struct wad_print_helper { 

# 409 ---NEW ENTRY---
struct wad_print_helper { 

# 410 ---NEW ENTRY---
struct wad_print_helper { 

# 411 ---NEW ENTRY---
struct wad_print_helper { 

# 412 ---NEW ENTRY---
struct wad_print_helper { 

# 413 ---NEW ENTRY---
struct wad_print_helper { 

# 414 ---NEW ENTRY---
struct wad_print_helper { 

# 415 ---NEW ENTRY---
struct wad_print_helper { 

# 416 ---NEW ENTRY---
struct wad_print_helper { 

# 417 ---NEW ENTRY---
struct wad_print_helper { 

# 418 ---NEW ENTRY---
struct wad_print_helper { 

# 419 ---NEW ENTRY---
struct wad_print_helper { 

# 420 ---NEW ENTRY---
struct wad_print_helper { 

# 421 ---NEW ENTRY---
struct wad_print_helper { 

# 422 ---NEW ENTRY---
struct wad_print_helper { 

# 423 ---NEW ENTRY---
struct wad_print_helper { 

# 424 ---NEW ENTRY---
struct wad_print_helper { 

# 425 ---NEW ENTRY---
struct wad_print_helper { 

# 426 ---NEW ENTRY---
struct wad_print_helper { 

# 427 ---NEW ENTRY---
struct wad_print_helper { 

# 428 ---NEW ENTRY---
struct wad_print_helper { 

# 429 ---NEW ENTRY---
struct wad_print_helper { 

# 430 ---NEW ENTRY---
struct wad_print_helper { 

# 431 ---NEW ENTRY---
struct wad_print_helper { 

# 432 ---NEW ENTRY---
struct wad_print_helper { 

# 433 ---NEW ENTRY---
struct wad_print_helper { 

# 434 ---NEW ENTRY---
struct wad_print_helper { 

# 435 ---NEW ENTRY---
struct wad_print_helper { 

# 436 ---NEW ENTRY---
struct wad_print_helper { 

# 437 ---NEW ENTRY---
struct wad_print_helper { 

# 438 ---NEW ENTRY---
struct wad_print_helper { 

# 439 ---NEW ENTRY---
struct wad_print_helper { 

# 440 ---NEW ENTRY---
struct wad_print_helper { 

# 441 ---NEW ENTRY---
struct wad_print_helper { 

# 442 ---NEW ENTRY---
struct wad_print_helper { 

# 443 ---NEW ENTRY---
struct wad_print_helper { 

# 444 ---NEW ENTRY---
struct wad_print_helper { 

# 445 ---NEW ENTRY---
struct wad_print_helper { 

# 446 ---NEW ENTRY---
struct wad_print_helper { 

# 447 ---NEW ENTRY---
struct wad_print_helper { 

# 448 ---NEW ENTRY---
struct wad_print_helper { 

# 449 ---NEW ENTRY---
struct wad_print_helper { 

# 450 ---NEW ENTRY---
struct wad_print_helper { 

# 451 ---NEW ENTRY---
struct wad_print_helper { 

# 452 ---NEW ENTRY---
struct wad_print_helper { 

# 453 ---NEW ENTRY---
struct wad_print_helper { 

# 454 ---NEW ENTRY---
struct wad_print_helper { 

# 455 ---NEW ENTRY---
struct wad_print_helper { 

# 456 ---NEW ENTRY---
struct wad_print_helper { 

# 457 ---NEW ENTRY---
struct wad_print_helper { 

# 458 ---NEW ENTRY---
struct wad_print_helper { 

# 459 ---NEW ENTRY---
struct wad_print_helper { 

# 460 ---NEW ENTRY---
struct wad_print_helper { 

# 461 ---NEW ENTRY---
struct wad_print_helper { 

# 462 ---NEW ENTRY---
struct wad_print_helper { 

# 463 ---NEW ENTRY---
struct wad_print_helper { 

# 464 ---NEW ENTRY---
struct wad_print_helper { 

# 465 ---NEW ENTRY---
struct wad_print_helper { 

# 466 ---NEW ENTRY---
struct wad_print_helper { 

# 467 ---NEW ENTRY---
struct wad_print_helper { 

# 468 ---NEW ENTRY---
struct wad_print_helper { 

# 469 ---NEW ENTRY---
struct wad_print_helper { 

# 470 ---NEW ENTRY---
struct wad_print_helper { 

# 471 ---NEW ENTRY---
struct wad_print_helper { 

# 472 ---NEW ENTRY---
struct wad_print_helper { 

# 473 ---NEW ENTRY---
struct wad_print_helper { 

# 474 ---NEW ENTRY---
struct wad_print_helper { 

# 475 ---NEW ENTRY---
struct wad_print_helper { 

# 476 ---NEW ENTRY---
struct wad_print_helper { 

# 477 ---NEW ENTRY---
struct wad_print_helper { 

# 478 ---NEW ENTRY---
struct wad_print_helper { 

# 479 ---NEW ENTRY---
struct wad_print_helper { 

# 480 ---NEW ENTRY---
struct wad_print_helper { 

# 481 ---NEW ENTRY---
struct wad_print_helper { 

# 482 ---NEW ENTRY---
struct wad_print_helper { 

# 483 ---NEW ENTRY---
struct wad_print_helper { 

# 484 ---NEW ENTRY---
struct wad_print_helper { 

# 485 ---NEW ENTRY---
struct wad_print_helper { 

# 486 ---NEW ENTRY---
struct wad_print_helper { 

# 487 ---NEW ENTRY---
struct wad_print_helper { 

# 488 ---NEW ENTRY---
struct wad_print_helper { 

# 489 ---NEW ENTRY---
struct wad_print_helper { 

# 490 ---NEW ENTRY---
struct wad_print_helper { 

# 491 ---NEW ENTRY---
struct wad_print_helper { 

# 492 ---NEW ENTRY---
struct wad_print_helper { 

# 493 ---NEW ENTRY---
struct wad_print_helper { 

# 494 ---NEW ENTRY---
struct wad_print_helper { 

# 495 ---NEW ENTRY---
struct wad_print_helper { 

# 496 ---NEW ENTRY---
struct wad_print_helper { 

# 497 ---NEW ENTRY---
struct wad_print_helper { 

# 498 ---NEW ENTRY---
struct wad_print_helper { 

# 499 ---NEW ENTRY---
struct wad_print_helper { 

# 500 ---NEW ENTRY---
struct wad_print_helper { 

# 501 ---NEW ENTRY---
struct wad_print_helper { 

# 502 ---NEW ENTRY---
struct wad_print_helper { 

# 503 ---NEW ENTRY---
struct wad_print_helper { 

# 504 ---NEW ENTRY---
struct wad_print_helper { 

# 505 ---NEW ENTRY---
struct wad_print_helper { 

# 506 ---NEW ENTRY---
struct wad_print_helper { 

# 507 ---NEW ENTRY---
struct wad_print_helper { 

# 508 ---NEW ENTRY---
struct wad_print_helper { 

# 509 ---NEW ENTRY---
struct wad_print_helper { 

# 510 ---NEW ENTRY---
struct wad_print_helper { 

# 511 ---NEW ENTRY---
struct wad_print_helper { 

# 512 ---NEW ENTRY---
struct wad_print_helper { 

# 513 ---NEW ENTRY---
struct wad_print_helper { 

# 514 ---NEW ENTRY---
struct wad_print_helper { 

# 515 ---NEW ENTRY---
struct wad_print_helper { 

# 516 ---NEW ENTRY---
struct wad_print_helper { 

# 517 ---NEW ENTRY---
struct wad_print_helper { 

# 518 ---NEW ENTRY---
struct wad_print_helper { 

# 519 ---NEW ENTRY---
struct wad_print_helper { 

# 520 ---NEW ENTRY---
struct wad_print_helper { 

# 521 ---NEW ENTRY---
struct wad_print_helper { 

# 522 ---NEW ENTRY---
struct wad_print_helper { 

# 523 ---NEW ENTRY---
struct wad_print_helper { 

# 524 ---NEW ENTRY---
struct wad_print_helper { 

# 525 ---NEW ENTRY---
struct wad_print_helper { 

# 526 ---NEW ENTRY---
struct wad_print_helper { 

# 527 ---NEW ENTRY---
struct wad_print_helper { 

# 528 ---NEW ENTRY---
struct wad_print_helper { 

# 529 ---NEW ENTRY---
struct wad_print_helper { 

# 530 ---NEW ENTRY---
struct wad_print_helper { 

# 531 ---NEW ENTRY---
struct wad_print_helper { 

# 532 ---NEW ENTRY---
struct wad_print_helper { 

# 533 ---NEW ENTRY---
struct wad_print_helper { 

# 534 ---NEW ENTRY---
struct wad_print_helper { 

# 535 ---NEW ENTRY---
struct wad_print_helper { 

# 536 ---NEW ENTRY---
struct wad_print_helper { 

# 537 ---NEW ENTRY---
struct wad_print_helper { 

# 538 ---NEW ENTRY---
struct wad_print_helper { 

# 539 ---NEW ENTRY---
struct wad_print_helper { 

# 540 ---NEW ENTRY---
struct wad_print_helper { 

# 541 ---NEW ENTRY---
struct wad_print_helper { 

# 542 ---NEW ENTRY---
struct wad_print_helper { 

# 543 ---NEW ENTRY---
struct wad_print_helper { 

# 544 ---NEW ENTRY---
struct wad_print_helper { 

# 545 ---NEW ENTRY---
struct wad_print_helper { 

# 546 ---NEW ENTRY---
struct wad_print_helper { 

# 547 ---NEW ENTRY---
struct wad_print_helper { 

# 548 ---NEW ENTRY---
struct wad_print_helper { 

# 549 ---NEW ENTRY---
struct wad_print_helper { 

# 550 ---NEW ENTRY---
struct wad_print_helper { 

# 551 ---NEW ENTRY---
struct wad_print_helper { 

# 552 ---NEW ENTRY---
struct wad_print_helper { 

# 553 ---NEW ENTRY---
struct wad_print_helper { 

# 554 ---NEW ENTRY---
struct wad_print_helper { 

# 555 ---NEW ENTRY---
struct wad_print_helper { 

# 556 ---NEW ENTRY---
struct wad_print_helper { 

# 557 ---NEW ENTRY---
struct wad_print_helper { 

# 558 ---NEW ENTRY---
struct wad_print_helper { 

# 559 ---NEW ENTRY---
struct wad_print_helper { 

# 560 ---NEW ENTRY---
struct wad_print_helper { 

# 561 ---NEW ENTRY---
struct wad_print_helper { 

# 562 ---NEW ENTRY---
struct wad_print_helper { 

# 563 ---NEW ENTRY---
struct wad_print_helper { 

# 564 ---NEW ENTRY---
struct wad_print_helper { 

# 565 ---NEW ENTRY---
struct wad_print_helper { 

# 566 ---NEW ENTRY---
struct wad_print_helper { 

# 567 ---NEW ENTRY---
struct wad_print_helper { 

# 568 ---NEW ENTRY---
struct wad_print_helper { 

# 569 ---NEW ENTRY---
struct wad_print_helper { 

# 570 ---NEW ENTRY---
struct wad_print_helper { 

# 571 ---NEW ENTRY---
struct wad_print_helper { 

# 572 ---NEW ENTRY---
struct wad_print_helper { 

# 573 ---NEW ENTRY---
struct wad_print_helper { 

# 574 ---NEW ENTRY---
struct wad_print_helper { 

# 575 ---NEW ENTRY---
struct wad_print_helper { 

# 576 ---NEW ENTRY---
struct wad_print_helper { 

# 577 ---NEW ENTRY---
struct wad_print_helper { 

# 578 ---NEW ENTRY---
struct wad_print_helper { 

# 579 ---NEW ENTRY---
struct wad_print_helper { 

# 580 ---NEW ENTRY---
struct wad_print_helper { 

# 581 ---NEW ENTRY---
struct wad_print_helper { 

# 582 ---NEW ENTRY---
struct wad_print_helper { 

# 583 ---NEW ENTRY---
struct wad_print_helper { 

# 584 ---NEW ENTRY---
struct wad_print_helper { 

# 585 ---NEW ENTRY---
struct wad_print_helper { 

# 586 ---NEW ENTRY---
struct wad_print_helper { 

# 587 ---NEW ENTRY---
struct wad_print_helper { 

# 588 ---NEW ENTRY---
struct wad_print_helper { 

# 589 ---NEW ENTRY---
struct wad_print_helper { 

# 590 ---NEW ENTRY---
struct wad_print_helper { 

# 591 ---NEW ENTRY---
struct wad_print_helper { 

# 592 ---NEW ENTRY---
struct wad_print_helper { 

# 593 ---NEW ENTRY---
struct wad_print_helper { 

# 594 ---NEW ENTRY---
struct wad_print_helper { 

# 595 ---NEW ENTRY---
struct wad_print_helper { 

# 596 ---NEW ENTRY---
struct wad_print_helper { 

# 597 ---NEW ENTRY---
struct wad_print_helper { 

# 598 ---NEW ENTRY---
struct wad_print_helper { 

# 599 ---NEW ENTRY---
struct wad_print_helper { 

# 600 ---NEW ENTRY---
struct wad_print_helper { 

# 601 ---NEW ENTRY---
struct wad_print_helper { 

# 602 ---NEW ENTRY---
struct wad_print_helper { 

# 603 ---NEW ENTRY---
struct wad_print_helper { 

# 604 ---NEW ENTRY---
struct wad_print_helper { 

# 605 ---NEW ENTRY---
struct wad_print_helper { 

# 606 ---NEW ENTRY---
struct wad_print_helper { 

# 607 ---NEW ENTRY---
struct wad_print_helper { 

# 608 ---NEW ENTRY---
struct wad_print_helper { 

# 609 ---NEW ENTRY---
struct wad_print_helper { 

# 610 ---NEW ENTRY---
struct wad_print_helper { 

# 611 ---NEW ENTRY---
struct wad_print_helper { 

# 612 ---NEW ENTRY---
struct wad_print_helper { 

# 613 ---NEW ENTRY---
struct wad_print_helper { 

# 614 ---NEW ENTRY---
struct wad_print_helper { 

# 615 ---NEW ENTRY---
struct wad_print_helper { 

# 616 ---NEW ENTRY---
struct wad_print_helper { 

# 617 ---NEW ENTRY---
struct wad_print_helper { 

# 618 ---NEW ENTRY---
struct wad_print_helper { 

# 619 ---NEW ENTRY---
struct wad_print_helper { 

# 620 ---NEW ENTRY---
struct wad_print_helper { 

# 621 ---NEW ENTRY---
struct wad_print_helper { 

# 622 ---NEW ENTRY---
struct wad_print_helper { 

# 623 ---NEW ENTRY---
struct wad_print_helper { 

# 624 ---NEW ENTRY---
struct wad_print_helper { 

# 625 ---NEW ENTRY---
struct wad_print_helper { 

# 626 ---NEW ENTRY---
struct wad_print_helper { 

# 627 ---NEW ENTRY---
struct wad_print_helper { 

# 628 ---NEW ENTRY---
struct wad_print_helper { 

# 629 ---NEW ENTRY---
struct wad_print_helper { 

# 630 ---NEW ENTRY---
struct wad_print_helper { 

# 631 ---NEW ENTRY---
struct wad_print_helper { 

# 632 ---NEW ENTRY---
struct wad_print_helper { 

# 633 ---NEW ENTRY---
struct wad_print_helper { 

# 634 ---NEW ENTRY---
struct wad_print_helper { 

# 635 ---NEW ENTRY---
struct wad_print_helper { 

# 636 ---NEW ENTRY---
struct wad_print_helper { 

# 637 ---NEW ENTRY---
struct wad_print_helper { 

# 638 ---NEW ENTRY---
struct wad_print_helper { 

# 639 ---NEW ENTRY---
struct wad_print_helper { 

# 640 ---NEW ENTRY---
struct wad_print_helper { 

# 641 ---NEW ENTRY---
struct wad_print_helper { 

# 642 ---NEW ENTRY---
struct wad_print_helper { 

# 643 ---NEW ENTRY---
struct wad_print_helper { 

# 644 ---NEW ENTRY---
struct wad_print_helper { 

# 645 ---NEW ENTRY---
struct wad_print_helper { 

# 646 ---NEW ENTRY---
struct wad_print_helper { 

# 647 ---NEW ENTRY---
struct wad_print_helper { 

# 648 ---NEW ENTRY---
struct wad_print_helper { 

# 649 ---NEW ENTRY---
struct wad_print_helper { 

# 650 ---NEW ENTRY---
struct wad_print_helper { 

# 651 ---NEW ENTRY---
struct wad_print_helper { 

# 652 ---NEW ENTRY---
struct wad_print_helper { 

# 653 ---NEW ENTRY---
struct wad_print_helper { 

# 654 ---NEW ENTRY---
struct wad_print_helper { 

# 655 ---NEW ENTRY---
struct wad_print_helper { 

# 656 ---NEW ENTRY---
struct wad_print_helper { 

# 657 ---NEW ENTRY---
struct wad_print_helper { 

# 658 ---NEW ENTRY---
struct wad_print_helper { 

# 659 ---NEW ENTRY---
struct wad_print_helper { 

# 660 ---NEW ENTRY---
struct wad_print_helper { 

# 661 ---NEW ENTRY---
struct wad_print_helper { 

# 662 ---NEW ENTRY---
struct wad_print_helper { 

# 663 ---NEW ENTRY---
struct wad_print_helper { 

# 664 ---NEW ENTRY---
struct wad_print_helper { 

# 665 ---NEW ENTRY---
struct wad_print_helper { 

# 666 ---NEW ENTRY---
struct wad_print_helper { 

# 667 ---NEW ENTRY---
struct wad_print_helper { 

# 668 ---NEW ENTRY---
struct wad_print_helper { 

# 669 ---NEW ENTRY---
struct wad_print_helper { 

# 670 ---NEW ENTRY---
struct wad_print_helper { 

# 671 ---NEW ENTRY---
struct wad_print_helper { 

# 672 ---NEW ENTRY---
struct wad_print_helper { 

# 673 ---NEW ENTRY---
struct wad_print_helper { 

# 674 ---NEW ENTRY---
struct wad_print_helper { 

# 675 ---NEW ENTRY---
struct wad_print_helper { 

# 676 ---NEW ENTRY---
struct wad_print_helper { 

# 677 ---NEW ENTRY---
struct wad_print_helper { 

# 678 ---NEW ENTRY---
struct wad_print_helper { 

# 679 ---NEW ENTRY---
struct wad_print_helper { 

# 680 ---NEW ENTRY---
struct wad_print_helper { 

# 681 ---NEW ENTRY---
struct wad_print_helper { 

# 682 ---NEW ENTRY---
struct wad_print_helper { 

# 683 ---NEW ENTRY---
struct wad_print_helper { 

# 684 ---NEW ENTRY---
struct wad_print_helper { 

# 685 ---NEW ENTRY---
struct wad_print_helper { 

# 686 ---NEW ENTRY---
struct wad_print_helper { 

# 687 ---NEW ENTRY---
struct wad_print_helper { 

# 688 ---NEW ENTRY---
struct wad_print_helper { 

# 689 ---NEW ENTRY---
struct wad_print_helper { 

# 690 ---NEW ENTRY---
struct wad_print_helper { 

# 691 ---NEW ENTRY---
struct wad_print_helper { 

# 692 ---NEW ENTRY---
struct wad_print_helper { 

# 693 ---NEW ENTRY---
struct wad_print_helper { 

# 694 ---NEW ENTRY---
struct wad_print_helper { 

# 695 ---NEW ENTRY---
struct wad_print_helper { 

# 696 ---NEW ENTRY---
struct wad_print_helper { 

# 697 ---NEW ENTRY---
struct wad_print_helper { 

# 698 ---NEW ENTRY---
struct wad_print_helper { 

# 699 ---NEW ENTRY---
struct wad_print_helper { 

# 700 ---NEW ENTRY---
struct wad_print_helper { 

# 701 ---NEW ENTRY---
struct wad_print_helper { 

# 702 ---NEW ENTRY---
struct wad_print_helper { 

# 703 ---NEW ENTRY---
struct wad_print_helper { 

# 704 ---NEW ENTRY---
struct wad_print_helper { 

# 705 ---NEW ENTRY---
struct wad_print_helper { 

# 706 ---NEW ENTRY---
struct wad_print_helper { 

# 707 ---NEW ENTRY---
struct wad_print_helper { 

# 708 ---NEW ENTRY---
struct wad_print_helper { 

# 709 ---NEW ENTRY---
struct wad_print_helper { 

# 710 ---NEW ENTRY---
struct wad_print_helper { 

# 711 ---NEW ENTRY---
struct wad_print_helper { 

# 712 ---NEW ENTRY---
struct wad_print_helper { 

# 713 ---NEW ENTRY---
struct wad_print_helper { 

# 714 ---NEW ENTRY---
struct wad_print_helper { 

# 715 ---NEW ENTRY---
struct wad_print_helper { 

# 716 ---NEW ENTRY---
struct wad_print_helper { 

# 717 ---NEW ENTRY---
struct wad_print_helper { 

# 718 ---NEW ENTRY---
struct wad_print_helper { 

# 719 ---NEW ENTRY---
struct wad_print_helper { 

# 720 ---NEW ENTRY---
struct wad_print_helper { 

# 721 ---NEW ENTRY---
struct wad_print_helper { 

# 722 ---NEW ENTRY---
struct wad_print_helper { 

# 723 ---NEW ENTRY---
struct wad_print_helper { 

# 724 ---NEW ENTRY---
struct wad_print_helper { 

# 725 ---NEW ENTRY---
struct wad_print_helper { 

# 726 ---NEW ENTRY---
struct wad_print_helper { 

# 727 ---NEW ENTRY---
struct wad_print_helper { 

# 728 ---NEW ENTRY---
struct wad_print_helper { 

# 729 ---NEW ENTRY---
struct wad_print_helper { 

# 730 ---NEW ENTRY---
struct wad_print_helper { 

# 731 ---NEW ENTRY---
struct wad_print_helper { 

# 732 ---NEW ENTRY---
struct wad_print_helper { 

# 733 ---NEW ENTRY---
struct wad_print_helper { 

# 734 ---NEW ENTRY---
struct wad_print_helper { 

# 735 ---NEW ENTRY---
struct wad_print_helper { 

# 736 ---NEW ENTRY---
struct wad_print_helper { 

# 737 ---NEW ENTRY---
struct wad_print_helper { 

# 738 ---NEW ENTRY---
struct wad_print_helper { 

# 739 ---NEW ENTRY---
struct wad_print_helper { 

# 740 ---NEW ENTRY---
struct wad_print_helper { 

# 741 ---NEW ENTRY---
struct wad_print_helper { 

# 742 ---NEW ENTRY---
struct wad_print_helper { 

# 743 ---NEW ENTRY---
struct wad_print_helper { 

# 744 ---NEW ENTRY---
struct wad_print_helper { 

# 745 ---NEW ENTRY---
struct wad_print_helper { 

# 746 ---NEW ENTRY---
struct wad_print_helper { 

# 747 ---NEW ENTRY---
struct wad_print_helper { 

# 748 ---NEW ENTRY---
struct wad_print_helper { 

# 749 ---NEW ENTRY---
struct wad_print_helper { 

# 750 ---NEW ENTRY---
struct wad_print_helper { 

# 751 ---NEW ENTRY---
struct wad_print_helper { 

# 752 ---NEW ENTRY---
struct wad_print_helper { 

# 753 ---NEW ENTRY---
struct wad_print_helper { 

# 754 ---NEW ENTRY---
struct wad_print_helper { 

# 755 ---NEW ENTRY---
struct wad_print_helper { 

# 756 ---NEW ENTRY---
struct wad_print_helper { 

# 757 ---NEW ENTRY---
struct wad_print_helper { 

# 758 ---NEW ENTRY---
struct wad_print_helper { 

# 759 ---NEW ENTRY---
struct wad_print_helper { 

# 760 ---NEW ENTRY---
struct wad_print_helper { 

# 761 ---NEW ENTRY---
struct wad_print_helper { 

# 762 ---NEW ENTRY---
struct wad_print_helper { 

# 763 ---NEW ENTRY---
struct wad_print_helper { 

# 764 ---NEW ENTRY---
struct wad_print_helper { 

# 765 ---NEW ENTRY---
struct wad_print_helper { 

# 766 ---NEW ENTRY---
struct wad_print_helper { 

# 767 ---NEW ENTRY---
struct wad_print_helper { 

# 768 ---NEW ENTRY---
struct wad_print_helper { 

# 769 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break: break call <macro>, break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 769 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct

# 1 ---NEW ENTRY---
struct wad_print_helper

# 2 ---NEW ENTRY---
struct wad_print_helper {

# 3 ---NEW ENTRY---
struct wad_print_helper { 

# 4 ---NEW ENTRY---
struct wad_print_helper { 

# 5 ---NEW ENTRY---
struct wad_print_helper { 

# 6 ---NEW ENTRY---
struct wad_print_helper { 

# 7 ---NEW ENTRY---
struct wad_print_helper { 

# 8 ---NEW ENTRY---
struct wad_print_helper { 

# 9 ---NEW ENTRY---
struct wad_print_helper { 

# 10 ---NEW ENTRY---
struct wad_print_helper { 

# 11 ---NEW ENTRY---
struct wad_print_helper { 

# 12 ---NEW ENTRY---
struct wad_print_helper { 

# 13 ---NEW ENTRY---
struct wad_print_helper { 

# 14 ---NEW ENTRY---
struct wad_print_helper { 

# 15 ---NEW ENTRY---
struct wad_print_helper { 

# 16 ---NEW ENTRY---
struct wad_print_helper { 

# 17 ---NEW ENTRY---
struct wad_print_helper { 

# 18 ---NEW ENTRY---
struct wad_print_helper { 

# 19 ---NEW ENTRY---
struct wad_print_helper { 

# 20 ---NEW ENTRY---
struct wad_print_helper { 

# 21 ---NEW ENTRY---
struct wad_print_helper { 

# 22 ---NEW ENTRY---
struct wad_print_helper { 

# 23 ---NEW ENTRY---
struct wad_print_helper { 

# 24 ---NEW ENTRY---
struct wad_print_helper { 

# 25 ---NEW ENTRY---
struct wad_print_helper { 

# 26 ---NEW ENTRY---
struct wad_print_helper { 

# 27 ---NEW ENTRY---
struct wad_print_helper { 

# 28 ---NEW ENTRY---
struct wad_print_helper { 

# 29 ---NEW ENTRY---
struct wad_print_helper { 

# 30 ---NEW ENTRY---
struct wad_print_helper { 

# 31 ---NEW ENTRY---
struct wad_print_helper { 

# 32 ---NEW ENTRY---
struct wad_print_helper { 

# 33 ---NEW ENTRY---
struct wad_print_helper { 

# 34 ---NEW ENTRY---
struct wad_print_helper { 

# 35 ---NEW ENTRY---
struct wad_print_helper { 

# 36 ---NEW ENTRY---
struct wad_print_helper { 

# 37 ---NEW ENTRY---
struct wad_print_helper { 

# 38 ---NEW ENTRY---
struct wad_print_helper { 

# 39 ---NEW ENTRY---
struct wad_print_helper { 

# 40 ---NEW ENTRY---
struct wad_print_helper { 

# 41 ---NEW ENTRY---
struct wad_print_helper { 

# 42 ---NEW ENTRY---
struct wad_print_helper { 

# 43 ---NEW ENTRY---
struct wad_print_helper { 

# 44 ---NEW ENTRY---
struct wad_print_helper { 

# 45 ---NEW ENTRY---
struct wad_print_helper { 

# 46 ---NEW ENTRY---
struct wad_print_helper { 

# 47 ---NEW ENTRY---
struct wad_print_helper { 

# 48 ---NEW ENTRY---
struct wad_print_helper { 

# 49 ---NEW ENTRY---
struct wad_print_helper { 

# 50 ---NEW ENTRY---
struct wad_print_helper { 

# 51 ---NEW ENTRY---
struct wad_print_helper { 

# 52 ---NEW ENTRY---
struct wad_print_helper { 

# 53 ---NEW ENTRY---
struct wad_print_helper { 

# 54 ---NEW ENTRY---
struct wad_print_helper { 

# 55 ---NEW ENTRY---
struct wad_print_helper { 

# 56 ---NEW ENTRY---
struct wad_print_helper { 

# 57 ---NEW ENTRY---
struct wad_print_helper { 

# 58 ---NEW ENTRY---
struct wad_print_helper { 

# 59 ---NEW ENTRY---
struct wad_print_helper { 

# 60 ---NEW ENTRY---
struct wad_print_helper { 

# 61 ---NEW ENTRY---
struct wad_print_helper { 

# 62 ---NEW ENTRY---
struct wad_print_helper { 

# 63 ---NEW ENTRY---
struct wad_print_helper { 

# 64 ---NEW ENTRY---
struct wad_print_helper { 

# 65 ---NEW ENTRY---
struct wad_print_helper { 

# 66 ---NEW ENTRY---
struct wad_print_helper { 

# 67 ---NEW ENTRY---
struct wad_print_helper { 

# 68 ---NEW ENTRY---
struct wad_print_helper { 

# 69 ---NEW ENTRY---
struct wad_print_helper { 

# 70 ---NEW ENTRY---
struct wad_print_helper { 

# 71 ---NEW ENTRY---
struct wad_print_helper { 

# 72 ---NEW ENTRY---
struct wad_print_helper { 

# 73 ---NEW ENTRY---
struct wad_print_helper { 

# 74 ---NEW ENTRY---
struct wad_print_helper { 

# 75 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper { 

# 1 ---NEW ENTRY---
struct wad_print_helper { 

# 2 ---NEW ENTRY---
struct wad_print_helper { 

# 3 ---NEW ENTRY---
struct wad_print_helper { 

# 4 ---NEW ENTRY---
struct wad_print_helper { 

# 5 ---NEW ENTRY---
struct wad_print_helper { 

# 6 ---NEW ENTRY---
struct wad_print_helper { 

# 7 ---NEW ENTRY---
struct wad_print_helper { 

# 8 ---NEW ENTRY---
struct wad_print_helper { 

# 9 ---NEW ENTRY---
struct wad_print_helper { 

# 10 ---NEW ENTRY---
struct wad_print_helper { 

# 11 ---NEW ENTRY---
struct wad_print_helper { 

# 12 ---NEW ENTRY---
struct wad_print_helper { 

# 13 ---NEW ENTRY---
struct wad_print_helper { 

# 14 ---NEW ENTRY---
struct wad_print_helper { 

# 15 ---NEW ENTRY---
struct wad_print_helper { 

# 16 ---NEW ENTRY---
struct wad_print_helper { 

# 17 ---NEW ENTRY---
struct wad_print_helper { 

# 18 ---NEW ENTRY---
struct wad_print_helper { 

# 19 ---NEW ENTRY---
struct wad_print_helper { 

# 20 ---NEW ENTRY---
struct wad_print_helper { 

# 21 ---NEW ENTRY---
struct wad_print_helper { 

# 22 ---NEW ENTRY---
struct wad_print_helper { 

# 23 ---NEW ENTRY---
struct wad_print_helper { 

# 24 ---NEW ENTRY---
struct wad_print_helper { 

# 25 ---NEW ENTRY---
struct wad_print_helper { 

# 26 ---NEW ENTRY---
struct wad_print_helper { 

# 27 ---NEW ENTRY---
struct wad_print_helper { 

# 28 ---NEW ENTRY---
struct wad_print_helper { 

# 29 ---NEW ENTRY---
struct wad_print_helper { 

# 30 ---NEW ENTRY---
struct wad_print_helper { 

# 31 ---NEW ENTRY---
struct wad_print_helper { 

# 32 ---NEW ENTRY---
struct wad_print_helper { 

# 33 ---NEW ENTRY---
struct wad_print_helper { 

# 34 ---NEW ENTRY---
struct wad_print_helper { 

# 35 ---NEW ENTRY---
struct wad_print_helper { 

# 36 ---NEW ENTRY---
struct wad_print_helper { 

# 37 ---NEW ENTRY---
struct wad_print_helper { 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { struct { uint64_t total_req ; uint64_t served_req ; uint64_t total_server ; uint64_t active_server ; } http_1way_svr ; struct { uint64_t total_req ; uint64_t total_sessions ; uint64_t http_0_9_req ; } http ; struct { uint64_t total_req ; uint32_t concurrent_req ; } webcache ; struct { uint64_t total_req ; uint64_t total_sessions ; uint32_t concurrent_req ; uint32_t concurrent_sessions ; } web_proxy ; struct { uint64_t http_0_9 ; } error ; struct wad_stats_s_http2 http2 ; } ; void wad_stats_add_http_engine ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_http_engine ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_http_engine ( bool recursive , void * src ) ; struct wad_stats_s_diag { uint64_t malloc_fail ; uint64_t process_num ; uint64_t get_proc_fail ; uint64_t dbg_conn_num ; uint64_t max_sess_over ; uint64_t sess_num ; uint64_t sess_num_srv ; uint64_t sess_num_cli ; uint64_t resp_num ; uint64_t req_dup ; uint64_t cmd_mismatch ; uint64_t sess_not_found ; uint64_t cmd_wrong ; } ; void wad_stats_add_diag ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_diag ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_diag ( bool recursive , void * src ) ; ; 
 enum wad_shm_stats_type { 
 wad_stats_type_http_engine , wad_stats_type_diag , 
 WAD_STATS_TYPE_MAX 
 } ; 
 typedef int ( * wad_stats_clear_func_ptr ) ( bool recursive , void * src ) ; 
 wad_stats_clear_func_ptr wad_stats_get_clear_func ( enum wad_shm_stats_type ) ; 
 static inline void wad_glob_max_add ( struct wad_glob_max * a , struct wad_glob_max * b ) 
 { 
 if ( b -> max > a -> max ) 
 a -> m


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct
pp (lexed)> 

# 1 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { struct { uint64_t total_req ; uint64_t served_req ; uint64_t total_server ; uint64_t active_server ; } http_1way_svr ; struct { uint64_t total_req ; uint64_t total_sessions ; uint64_t http_0_9_req ; } http ; struct { uint64_t total_req ; uint32_t concurrent_req ; } webcache ; struct { uint64_t total_req ; uint64_t total_sessions ; uint32_t concurrent_req ; uint32_t concurrent_sessions ; } web_proxy ; struct { uint64_t http_0_9 ; } error ; struct wad_stats_s_http2 http2 ; } ; void wad_stats_add_http_engine ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_http_engine ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_http_engine ( bool recursive , void * src ) ; struct wad_stats_s_diag { uint64_t malloc_fail ; uint64_t process_num ; uint64_t get_proc_fail ; uint64_t dbg_conn_num ; uint64_t max_sess_over ; uint64_t sess_num ; uint64_t sess_num_srv ; uint64_t sess_num_cli ; uint64_t resp_num ; uint64_t req_dup ; uint64_t cmd_mismatch ; uint64_t sess_not_found ; uint64_t cmd_wrong ; } ; void wad_stats_add_diag ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_diag ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_diag ( bool recursive , void * src ) ; ; 
 enum wad_shm_stats_type { 
 wad_stats_type_http_engine , wad_stats_type_diag , 
 WAD_STATS_TYPE_MAX 
 } ; 
 typedef int ( * wad_stats_clear_func_ptr ) ( bool recursive , void * src ) ; 
 wad_stats_clear_func_ptr wad_stats_get_clear_func ( enum wad_shm_stats_type ) ; 
 static inline void wad_glob_max_add ( struct wad_glob_max * a , struct wad_glob_max * b ) 
 { 
 if ( b -> max > a -> max ) 
 a -> m


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { struct { uint64_t total_req ; uint64_t served_req ; uint64_t total_server ; uint64_t active_server ; } http_1way_svr ; struct { uint64_t total_req ; uint64_t total_sessions ; uint64_t http_0_9_req ; } http ; struct { uint64_t total_req ; uint32_t concurrent_req ; } webcache ; struct { uint64_t total_req ; uint64_t total_sessions ; uint32_t concurrent_req ; uint32_t concurrent_sessions ; } web_proxy ; struct { uint64_t http_0_9 ; } error ; struct wad_stats_s_http2 http2 ; } ; void wad_stats_add_http_engine ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_http_engine ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_http_engine ( bool recursive , void * src ) ; struct wad_stats_s_diag { uint64_t malloc_fail ; uint64_t process_num ; uint64_t get_proc_fail ; uint64_t dbg_conn_num ; uint64_t max_sess_over ; uint64_t sess_num ; uint64_t sess_num_srv ; uint64_t sess_num_cli ; uint64_t resp_num ; uint64_t req_dup ; uint64_t cmd_mismatch ; uint64_t sess_not_found ; uint64_t cmd_wrong ; } ; void wad_stats_add_diag ( int itr , bool recursive , void * dst , void * src ) ; void wad_stats_print_diag ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int wad_stats_reset_diag ( bool recursive , void * src ) ; ; 
 enum wad_shm_stats_type { 
 wad_stats_type_http_engine , wad_stats_type_diag , 
 WAD_STATS_TYPE_MAX 
 } ; 
 typedef int ( * wad_stats_clear_func_ptr ) ( bool recursive , void * src ) ; 
 wad_stats_clear_func_ptr wad_stats_get_clear_func ( enum wad_shm_stats_type ) ; 
 static inline void wad_glob_max_add ( struct wad_glob_max * a , struct wad_glob_max * b ) 
 { 
 if ( b -> max > a -> max ) 
 a -> m


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct
pp (lexed)> 

# 1 ---NEW ENTRY---
struct wad_print_helper { 

# 2 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (expanded)> 

# 3 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (called)> 

# 4 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 

# 5 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 

# 6 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT ( http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 

# 7 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT ( http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 

# 8 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct WAD_STATS_PREFIX ( s_http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 

# 9 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct WAD_STATS_PREFIX ( s_http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 

# 10 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 

# 11 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (rescanned)> 

# 12 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (rescanned)> 

# 13 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 

# 14 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_STRUCT_START ( http_1way_svr ) WAD_STATS_INT ( 64 , total_req ) WAD_STATS_INT ( 64 , served_req ) WAD_STATS_INT ( 64 , total_server ) WAD_STATS_INT ( 64 , active_server ) WAD_STATS_STRUCT_END ( http_1way_svr ) WAD_STATS_STRUCT_START ( http ) WAD_STATS_INT ( 64 , total_req ) WAD_STATS_INT ( 64 , total_sessions ) WAD_STATS_INT ( 64 , http_0_9_req ) WAD_STATS_STRUCT_END ( http ) WAD_STATS_STRUCT_START ( webcache ) WAD_STATS_INT ( 64 , total_req ) WAD_STATS_INT ( 32 , concurrent_req ) WAD_STATS_STRUCT_END ( webcache ) WAD_STATS_STRUCT_START ( web_proxy ) WAD_STATS_INT ( 64 , total_req ) WAD_STATS_INT ( 64 , total_sessions ) WAD_STATS_INT ( 32 , concurrent_req ) WAD_STATS_INT ( 32 , concurrent_sessions ) WAD_STATS_STRUCT_END ( web_proxy ) WAD_STATS_STRUCT_START ( error ) WAD_STATS_INT ( 64 , http_0_9 ) WAD_STATS_STRUCT_END ( error ) WAD_STATS_STRUCT_SUB ( http2 , http2 ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---


# 1 ---NEW ENTRY---


# 2 ---NEW ENTRY---


# 3 ---NEW ENTRY---


# 4 ---NEW ENTRY---


# 5 ---NEW ENTRY---


# 6 ---NEW ENTRY---


# 7 ---NEW ENTRY---


# 8 ---NEW ENTRY---


# 9 ---NEW ENTRY---


# 10 ---NEW ENTRY---



# 0 ---NEW ENTRY---

format succ

# 0 ---NEW ENTRY---

format succ

# 1 ---NEW ENTRY---

format succ

# 2 ---NEW ENTRY---

format succ

# 3 ---NEW ENTRY---

format succ

# 4 ---NEW ENTRY---

format succ

# 5 ---NEW ENTRY---



# 0 ---NEW ENTRY---

format succ 

# 0 ---NEW ENTRY---

format succ 

# 1 ---NEW ENTRY---

format succ 

# 2 ---NEW ENTRY---

format succ 

# 3 ---NEW ENTRY---

format succ 

# 4 ---NEW ENTRY---

format succ 

# 5 ---NEW ENTRY---

format succ 

# 6 ---NEW ENTRY---

format succ 

# 7 ---NEW ENTRY---

format succ 

# 8 ---NEW ENTRY---

format succ 

# 9 ---NEW ENTRY---

format succ 

# 10 ---NEW ENTRY---

format succ 

# 11 ---NEW ENTRY---

format succ 

# 12 ---NEW ENTRY---

format succ 

# 13 ---NEW ENTRY---

format succ 

# 14 ---NEW ENTRY---

format succ 

# 15 ---NEW ENTRY---

format succ 

# 16 ---NEW ENTRY---

format succ 

# 17 ---NEW ENTRY---

format succ 

# 18 ---NEW ENTRY---

format succ 

# 19 ---NEW ENTRY---

format succ 

# 20 ---NEW ENTRY---

format succ 

# 21 ---NEW ENTRY---

format succ 

# 22 ---NEW ENTRY---

format succ 

# 23 ---NEW ENTRY---

format succ 

# 24 ---NEW ENTRY---

format succ 

# 25 ---NEW ENTRY---

format succ 

# 26 ---NEW ENTRY---

format succ 

# 27 ---NEW ENTRY---

format succ 

# 28 ---NEW ENTRY---

format succ 

# 29 ---NEW ENTRY---

format succ 

# 30 ---NEW ENTRY---

format succ 

# 31 ---NEW ENTRY---

format succ 

# 32 ---NEW ENTRY---

format succ 

# 33 ---NEW ENTRY---

format succ 

# 34 ---NEW ENTRY---

format succ 

# 35 ---NEW ENTRY---

format succ 

# 36 ---NEW ENTRY---

format succ 

# 37 ---NEW ENTRY---

format succ 

# 38 ---NEW ENTRY---

format succ 

# 39 ---NEW ENTRY---

format succ 

# 40 ---NEW ENTRY---

format succ 

# 41 ---NEW ENTRY---

format succ 

# 42 ---NEW ENTRY---

format succ 

# 43 ---NEW ENTRY---

format succ 

# 44 ---NEW ENTRY---

format succ 

# 45 ---NEW ENTRY---

format succ 

# 46 ---NEW ENTRY---



# 0 ---NEW ENTRY---

format fail

# 0 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_ALL ( WAD_STATS_DECLARE )
pp (called)> 
format fail

# 1 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 2 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (called)> 
format fail

# 3 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 4 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 
format fail

# 5 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT ( http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 6 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 

format fail

# 7 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct WAD_STATS_PREFIX ( s_http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 8 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct WAD_STATS_PREFIX ( s_http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 
format fail

# 9 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 10 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 struct wad_stats_s_http_engine { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (rescanned)> 


# 0 ---NEW ENTRY---

format fail

# 0 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_ALL ( WAD_STATS_DECLARE )
pp (called)> 
format fail

# 1 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 2 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_DECLARE ( http_engine ) WAD_STATS_DECLARE ( diag )
pp (called)> 
format fail

# 3 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 4 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT_DEF ( http_engine ) ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 
format fail

# 5 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT ( http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (expanded)> 
format fail

# 6 ---NEW ENTRY---
struct wad_print_helper { 
 void * data ; 
 void ( * printer ) ( struct wad_print_helper * ph , const char * fmt , ... ) 
 __attribute__ ( ( __format__ ( __printf__ , 2 , 3 ) ) ) ; 
 } ; 
 struct wad_glob_max { 
 uint64_t max ; 
 } ; 
 WAD_STATS_STRUCT ( http_engine ) { WAD_STATS_DEF_http_engine ( WAD_STATS_INT , WAD_STATS_TYPE , WAD_STATS_STRUCT_START , WAD_STATS_STRUCT_END , WAD_STATS_STRUCT_SUB ) } ; void WAD_STATS_ADD_FUNC ( http_engine ) ( int itr , bool recursive , void * dst , void * src ) ; void WAD_STATS_PRINT_FUNC ( http_engine ) ( const char * prefix , bool recursive , void * src , struct wad_print_helper * ph ) ; int WAD_STATS_CLEAR_FUNC ( http_engine ) ( bool recursive , void * src ) ; WAD_STATS_DECLARE ( diag )
pp (called)> 


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_ALL(WAD_STATS_DECLARE)
pp(called) >

# 1 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(expanded) >

# 2 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(called) >

# 3 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 4 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 5 ---NEW ENTRY---
struct wad_print_helper {


# 6 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT(http_engine){
    WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                              WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                              WAD_STATS_STRUCT_SUB)};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 7 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct WAD_STATS_PREFIX(s_http_engine) {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 8 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct WAD_STATS_PREFIX(s_http_engine) {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 9 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 10 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(rescanned) >

# 11 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(rescanned) >

# 12 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 13 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_STRUCT_START(http_1way_svr)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, served_req) WAD_STATS_INT(
      64, total_server) WAD_STATS_INT(64, active_server)
      WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(http)
          WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
              WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                  WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(
                          webcache) WAD_STATS_STRUCT_START(web_proxy)
                          WAD_STATS_INT(64, total_req) WAD_STATS_INT(
                              64, total_sessions) WAD_STATS_INT(32,
                                                                concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 14 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_STRUCT_START(http_1way_svr)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, served_req) WAD_STATS_INT(
      64, total_server) WAD_STATS_INT(64, active_server)
      WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(http)
          WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
              WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                  WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(
                          webcache) WAD_STATS_STRUCT_START(web_proxy)
                          WAD_STATS_INT(64, total_req) WAD_STATS_INT(
                              64, total_sessions) WAD_STATS_INT(32,
                                                                concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 15 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type { WAD_STATS_ALL(WAD_STATS_TYPE_ENTRY) pp(called) >

# 16 ---NEW ENTRY---
struct wad_print_helper {

# 17 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 18 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 19 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 20 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 21 ---NEW ENTRY---
struct wad_print_helper {


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_ALL(WAD_STATS_DECLARE)
pp(called) >

# 1 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type { WAD_STATS_ALL(WAD_STATS_TYPE_ENTRY) pp(called) >

# 2 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->ma

# 3 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 4 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 5 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 6 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 7 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)


# 8 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));


# 9 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));


# 10 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 11 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));

# 12 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 13 ---NEW ENTRY---
struct wad_print_helper {

# 14 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 15 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));


# 16 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 17 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));


# 18 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)

# 19 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 20 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)

# 21 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 22 ---NEW ENTRY---
struct wad_print_helper {

# 23 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 24 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 25 ---NEW ENTRY---
struct wad_print_helper {
  void *data;


# 26 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 27 ---NEW ENTRY---
struct wad_print_helper {

# 28 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 29 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};


# 30 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 31 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 32 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 33 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 34 ---NEW ENTRY---
struct wad_print_helper {

# 35 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type {
  wad_stats_type_http_engine,
  wad_stats_type_diag,
  WAD_STATS_TYPE_MAX
};
typedef int (*wad_stats_clear_func_ptr)(bool recursive, void *src);
wad_stats_clear_func_ptr wad_stats_get_clear_func(enum wad_shm_stats_type);
static inline void wad_glob_max_add(struct wad_glob_max *a,
                                    struct wad_glob_max *b) {
  if (b->max > a->max)
  a->m

# 36 ---NEW ENTRY---
struct wad_print_helper {


# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper {

# 1 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(expanded) >

# 2 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(called) >

# 3 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 4 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 5 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT(http_engine){
    WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                              WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                              WAD_STATS_STRUCT_SUB)};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >

# 6 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT(http_engine){
    WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                              WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                              WAD_STATS_STRUCT_SUB)};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >

# 7 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type { WAD_STATS_ALL(WAD_STATS_TYPE_ENTRY) pp(called) >


# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper {


# 1 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint64_t http_0_9_req;
  } http;
  struct {
    uint64_t total_req;
    uint32_t concurrent_req;
  } webcache;
  struct {
    uint64_t total_req;
    uint64_t total_sessions;
    uint32_t concurrent_req;
    uint32_t concurrent_sessions;
  } web_proxy;
  struct {
    uint64_t http_0_9;
  } error;
  struct wad_stats_s_http2 http2;
};
void wad_stats_add_http_engine(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_http_engine(const char *prefix, bool recursive, void *src,
                                 struct wad_print_helper *ph);
int wad_stats_reset_http_engine(bool recursive, void *src);
struct wad_stats_s_diag {
  uint64_t malloc_fail;
  uint64_t process_num;
  uint64_t get_proc_fail;
  uint64_t dbg_conn_num;
  uint64_t max_sess_over;
  uint64_t sess_num;
  uint64_t sess_num_srv;
  uint64_t sess_num_cli;
  uint64_t resp_num;
  uint64_t req_dup;
  uint64_t cmd_mismatch;
  uint64_t sess_not_found;
  uint64_t cmd_wrong;
};
void wad_stats_add_diag(int itr, bool recursive, void *dst, void *src);
void wad_stats_print_diag(const char *prefix, bool recursive, void *src,
                          struct wad_print_helper *ph);
int wad_stats_reset_diag(bool recursive, void *src);
;
enum wad_shm_stats_type { WAD_STATS_ALL(WAD_STATS_TYPE_ENTRY) pp(called) >


# 2 ---NEW ENTRY---
struct wad_print_helper {



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
MY_LIST(KEEP_ITEM1)
pp(called) >


# 1 ---NEW ENTRY---
KEEP_ITEM1(ITEM1, keep_this) KEEP_ITEM1(ITEM2, not_this) pp(expanded) >


# 2 ---NEW ENTRY---
KEEP_ITEM1(ITEM1, keep_this) KEEP_ITEM1(ITEM2, not_this) pp(called) >


# 3 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0 ? 1 : 2]: keep_this)
        KEEP_ITEM1(ITEM2, not_this) pp(expanded) >


# 4 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0 ? 1 : 2]: keep_this)
        KEEP_ITEM1(ITEM2, not_this) pp(rescanned) >


# 5 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0 ? 1 : 2]: keep_this)
        KEEP_ITEM1(ITEM2, not_this) pp(called) >


# 6 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0
                    ? 1
                    : 2]: keep_this) _Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM2", "ITEM1") == 0 ? 1 : 2]: not_this) pp(expanded) >


# 7 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0
                    ? 1
                    : 2]: keep_this) _Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM2", "ITEM1") == 0 ? 1 : 2]: not_this)
        pp(rescanned) >


# 8 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0
                    ? 1
                    : 2]: keep_this) _Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM2", "ITEM1") == 0 ? 1 : 2]: not_this)
        pp(rescanned) >


# 9 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0
                    ? 1
                    : 2]: keep_this) _Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM2", "ITEM1") == 0 ? 1 : 2]: not_this)

        pp(lexed) >


# 10 ---NEW ENTRY---
_Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM1", "ITEM1") == 0
                    ? 1
                    : 2]: keep_this) _Generic(&(int[2]){0, 1},
        int (*)[strcmp("ITEM2", "ITEM1") == 0 ? 1 : 2]: not_this)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
MY_LIST(CONDITIONAL_IMPL)
pp(called) >


# 1 ---NEW ENTRY---
CONDITIONAL_IMPL(ITEM1, keep_this)
    CONDITIONAL_IMPL(ITEM2, not_this) pp(expanded) >


# 2 ---NEW ENTRY---
CONDITIONAL_IMPL(ITEM1, keep_this)
    CONDITIONAL_IMPL(ITEM2, not_this) pp(called) >


# 3 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONDITIONAL_IMPL(ITEM2, not_this) pp(expanded) >


# 4 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONDITIONAL_IMPL(ITEM2, not_this)
        pp(rescanned) >


# 5 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONDITIONAL_IMPL(ITEM2, not_this) pp(called) >


# 6 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONCAT(IMPL_, ITEM2)(not_this) pp(expanded) >


# 7 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONCAT(IMPL_, ITEM2)(not_this) pp(rescanned) >


# 8 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONCAT(IMPL_, ITEM2)(not_this) pp(rescanned) >


# 9 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONCAT(IMPL_, ITEM2)(not_this)

        pp(lexed) >


# 10 ---NEW ENTRY---
CONCAT(IMPL_, ITEM1)(keep_this) CONCAT(IMPL_, ITEM2)(not_this)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
DEFINE_MULTIPLE()
pp(called) >


# 1 ---NEW ENTRY---
DEFINE_FIRST(value1) DEFINE_SECOND(value2) DEFINE_THIRD(value3) pp(expanded) >


# 2 ---NEW ENTRY---
DEFINE_FIRST(value1) DEFINE_SECOND(value2) DEFINE_THIRD(value3) pp(called) >


# 3 ---NEW ENTRY---
#define FIRST value1 DEFINE_SECOND(value2) DEFINE_THIRD(value3)
pp(expanded) >


# 4 ---NEW ENTRY---
#define FIRST value1 DEFINE_SECOND(value2) DEFINE_THIRD(value3)
pp(rescanned) >


# 5 ---NEW ENTRY---
#define FIRST value1 DEFINE_SECOND(value2) DEFINE_THIRD(value3)
pp(called) >


# 6 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 DEFINE_THIRD(value3)
pp(expanded) >


# 7 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 DEFINE_THIRD(value3)
pp(rescanned) >


# 8 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 DEFINE_THIRD(value3)
pp(called) >


# 9 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 #define THIRD value3
pp(expanded) >


# 10 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 #define THIRD value3
pp(rescanned) >


# 11 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 #define THIRD value3
pp(rescanned) >


# 12 ---NEW ENTRY---
#define FIRST value1 #define SECOND value2 #define THIRD value3

pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
MACRO_TABLE
pp(called) >


# 1 ---NEW ENTRY---
X(MAX, 100) X(MIN, 0) X(DEFAULT, 50) pp(expanded) >


# 2 ---NEW ENTRY---
X(MAX, 100) X(MIN, 0) X(DEFAULT, 50) pp(expanded) >


# 3 ---NEW ENTRY---
X(MAX, 100) X(MIN, 0) X(DEFAULT, 50) pp(called) >


# 4 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(expanded) >


# 5 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(rescanned) >


# 6 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(called) >


# 7 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(expanded) >


# 8 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(rescanned) >


# 9 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(called) >


# 10 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(expanded) >


# 11 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(rescanned) >


# 12 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(rescanned) >


# 13 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50

pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
MACRO_TABLE
pp(called) >


# 1 ---NEW ENTRY---
X(MAX, 100) X(MIN, 0) X(DEFAULT, 50) pp(expanded) >


# 2 ---NEW ENTRY---
X(MAX, 100) X(MIN, 0) X(DEFAULT, 50) pp(called) >


# 3 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(expanded) >


# 4 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(rescanned) >


# 5 ---NEW ENTRY---
#define MAX 100 X(MIN, 0) X(DEFAULT, 50)
pp(called) >


# 6 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(expanded) >


# 7 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(rescanned) >


# 8 ---NEW ENTRY---
#define MAX 100 #define MIN 0 X(DEFAULT, 50)
pp(called) >


# 9 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(expanded) >


# 10 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(rescanned) >


# 11 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
pp(rescanned) >


# 12 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50

pp(lexed) >


# 13 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
printf pp(lexed) >


# 14 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
 printf (
pp (lexed)>


# 15 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
 printf ( "%d\n"
pp (lexed)>


# 16 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
 printf ( "%d\n" ,
pp (lexed)>


# 17 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
 printf ( "%d\n" , MAX
pp (lexed)>


# 18 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
printf("%d\n", MAX) pp(lexed) >


# 19 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
printf("%d\n", MAX);
pp(lexed) >


# 20 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
printf("%d\n", MAX);

pp(lexed) >


# 21 ---NEW ENTRY---
#define MAX 100 #define MIN 0 #define DEFAULT 50
printf("%d\n", MAX);

pp(complete) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};



# 1 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(expanded) >


# 2 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_DECLARE(http_engine) WAD_STATS_DECLARE(diag) pp(called) >


# 3 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >


# 4 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT_DEF(http_engine);
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >


# 5 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT(http_engine){
    WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                              WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                              WAD_STATS_STRUCT_SUB)};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >


# 6 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
WAD_STATS_STRUCT(http_engine){
    WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                              WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                              WAD_STATS_STRUCT_SUB)};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >


# 7 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};



# 8 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct WAD_STATS_PREFIX(s_http_engine) {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >


# 9 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >


# 10 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(rescanned) >


# 11 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(rescanned) >


# 12 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_DEF_http_engine(WAD_STATS_INT, WAD_STATS_TYPE,
                            WAD_STATS_STRUCT_START, WAD_STATS_STRUCT_END,
                            WAD_STATS_STRUCT_SUB)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >


# 13 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  WAD_STATS_STRUCT_START(http_1way_svr)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, served_req) WAD_STATS_INT(
      64, total_server) WAD_STATS_INT(64, active_server)
      WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(http)
          WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
              WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                  WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(
                          webcache) WAD_STATS_STRUCT_START(web_proxy)
                          WAD_STATS_INT(64, total_req) WAD_STATS_INT(
                              64, total_sessions) WAD_STATS_INT(32,
                                                                concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >


# 14 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)



# 15 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, served_req) WAD_STATS_INT(64, total_server) WAD_STATS_INT(
        64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(expanded) >


# 16 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, served_req) WAD_STATS_INT(64, total_server) WAD_STATS_INT(
        64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(rescanned) >


# 17 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, served_req) WAD_STATS_INT(64, total_server) WAD_STATS_INT(
        64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >


# 18 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    WAD_STATS_INT(64, served_req)
    WAD_STATS_INT(64, total_server) WAD_STATS_INT(64, active_server)
        WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(
            http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
            WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                    WAD_STATS_INT(32,
                                  concurrent_req) WAD_STATS_STRUCT_END(webcache)
                        WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(
                            64, total_req) WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(expanded) >


# 19 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    WAD_STATS_INT(64, served_req)
    WAD_STATS_INT(64, total_server) WAD_STATS_INT(64, active_server)
        WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(
            http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
            WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                    WAD_STATS_INT(32,
                                  concurrent_req) WAD_STATS_STRUCT_END(webcache)
                        WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(
                            64, total_req) WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(rescanned) >


# 20 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    WAD_STATS_INT(64, served_req)
    WAD_STATS_INT(64, total_server) WAD_STATS_INT(64, active_server)
        WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(
            http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
            WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
                WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                    WAD_STATS_INT(32,
                                  concurrent_req) WAD_STATS_STRUCT_END(webcache)
                        WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(
                            64, total_req) WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >


# 21 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    WAD_STATS_INT(64, total_server)
    WAD_STATS_INT(64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(expanded) >


# 22 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    WAD_STATS_INT(64, total_server)
    WAD_STATS_INT(64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(rescanned) >


# 23 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    WAD_STATS_INT(64, total_server)
    WAD_STATS_INT(64, active_server) WAD_STATS_STRUCT_END(http_1way_svr)
        WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
            64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
            WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
                WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                    WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(
                        web_proxy) WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >


# 24 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};



# 25 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    WAD_STATS_INT(64, active_server)
    WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(
        http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
        WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
            WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(webcache)
                    WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(64,
                                                                    total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(rescanned) >


# 26 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    WAD_STATS_INT(64, active_server)
    WAD_STATS_STRUCT_END(http_1way_svr) WAD_STATS_STRUCT_START(
        http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
        WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
            WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
                WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(webcache)
                    WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(64,
                                                                    total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >


# 27 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
    WAD_STATS_STRUCT_END(http_1way_svr)
    WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
        64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
        WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
            WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(web_proxy)
                    WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(expanded) >


# 28 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)


# 29 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
    WAD_STATS_STRUCT_END(http_1way_svr)
    WAD_STATS_STRUCT_START(http) WAD_STATS_INT(64, total_req) WAD_STATS_INT(
        64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
        WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
            WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(web_proxy)
                    WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >


# 30 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  WAD_STATS_STRUCT_START(http)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
      WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
          WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
              WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(webcache)
                  WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(64, total_sessions)
                          WAD_STATS_INT(32, concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(expanded) >


# 31 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  WAD_STATS_STRUCT_START(http)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
      WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
          WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
              WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(webcache)
                  WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(64, total_sessions)
                          WAD_STATS_INT(32, concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(rescanned) >


# 32 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  WAD_STATS_STRUCT_START(http)
  WAD_STATS_INT(64, total_req) WAD_STATS_INT(64, total_sessions)
      WAD_STATS_INT(64, http_0_9_req) WAD_STATS_STRUCT_END(http)
          WAD_STATS_STRUCT_START(webcache) WAD_STATS_INT(64, total_req)
              WAD_STATS_INT(32, concurrent_req) WAD_STATS_STRUCT_END(webcache)
                  WAD_STATS_STRUCT_START(web_proxy) WAD_STATS_INT(64, total_req)
                      WAD_STATS_INT(64, total_sessions)
                          WAD_STATS_INT(32, concurrent_req)
                              WAD_STATS_INT(32, concurrent_sessions)
                                  WAD_STATS_STRUCT_END(web_proxy)
                                      WAD_STATS_STRUCT_START(error)
                                          WAD_STATS_INT(64, http_0_9)
                                              WAD_STATS_STRUCT_END(error)
                                                  WAD_STATS_STRUCT_SUB(http2,
                                                                       http2)
};
void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                     void *src);
void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                       void *src, struct wad_print_helper *ph);
int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
WAD_STATS_DECLARE(diag)
pp(called) >


# 33 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
        WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
            WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(web_proxy)
                    WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(expanded) >


# 34 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
        WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
            WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(web_proxy)
                    WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(rescanned) >


# 35 ---NEW ENTRY---
struct wad_print_helper {
  void *data;
  void (*printer)(struct wad_print_helper *ph, const char *fmt, ...)
      __attribute__((__format__(__printf__, 2, 3)));
};
struct wad_glob_max {
  uint64_t max;
};
struct wad_stats_s_http_engine {
  struct {
    uint64_t total_req;
    uint64_t served_req;
    uint64_t total_server;
    uint64_t active_server;
  } http_1way_svr;
  struct {
    WAD_STATS_INT(64, total_req)
    WAD_STATS_INT(64, total_sessions) WAD_STATS_INT(64, http_0_9_req)
        WAD_STATS_STRUCT_END(http) WAD_STATS_STRUCT_START(webcache)
            WAD_STATS_INT(64, total_req) WAD_STATS_INT(32, concurrent_req)
                WAD_STATS_STRUCT_END(webcache) WAD_STATS_STRUCT_START(web_proxy)
                    WAD_STATS_INT(64, total_req)
                        WAD_STATS_INT(64, total_sessions)
                            WAD_STATS_INT(32, concurrent_req)
                                WAD_STATS_INT(32, concurrent_sessions)
                                    WAD_STATS_STRUCT_END(web_proxy)
                                        WAD_STATS_STRUCT_START(error)
                                            WAD_STATS_INT(64, http_0_9)
                                                WAD_STATS_STRUCT_END(error)
                                                    WAD_STATS_STRUCT_SUB(http2,
                                                                         http2)
  };
  void WAD_STATS_ADD_FUNC(http_engine)(int itr, bool recursive, void *dst,
                                       void *src);
  void WAD_STATS_PRINT_FUNC(http_engine)(const char *prefix, bool recursive,
                                         void *src,
                                         struct wad_print_helper *ph);
  int WAD_STATS_CLEAR_FUNC(http_engine)(bool recursive, void *src);
  WAD_STATS_DECLARE(diag)
  pp(called) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  pp(lexed) >


# 5 ---NEW ENTRY---
int main() {

  pp(lexed) >


# 6 ---NEW ENTRY---
int main() {
  struct pp(lexed) >


# 7 ---NEW ENTRY---
int main() {
  struct t_type2 pp(lexed) >


# 8 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2 pp(lexed) >


# 9 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  pp(lexed) >


# 10 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;

  pp(lexed) >


# 11 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf pp(lexed) >


# 12 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf (
pp (lexed)>


# 13 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n"
pp (lexed)>


# 14 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n" ,
pp (lexed)>


# 15 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n" , sizeof



# 16 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n" , sizeof (
pp (lexed)>


# 17 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n" , sizeof ( t_type2
pp (lexed)>


# 18 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
 printf ( "%d\n" , sizeof ( t_type2 )
pp (lexed)>


# 19 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2)) pp(lexed) >


# 20 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  pp(lexed) >


# 21 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));

  pp(lexed) >


# 22 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo pp(lexed) >


# 23 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
 foo (
pp (lexed)>


# 24 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo() pp(lexed) >


# 25 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  pp(lexed) >


# 26 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();

  pp(lexed) >


# 27 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  macro1 pp(called) >


# 28 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  pp(expanded) >


# 29 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  pp(rescanned) >


# 30 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");

  pp(lexed) >


# 31 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  macro2 pp(called) >


# 32 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 pp(expanded) >


# 33 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 pp(rescanned) >


# 34 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3

      pp(lexed) >


# 35 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 return pp(lexed) >


# 36 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 return 0 pp(lexed) >


# 37 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 return 0;
  pp(lexed) >


# 38 ---NEW ENTRY---
int main() {
  struct t_type2 t_type2;
  printf("%d\n", sizeof(t_type2));
  foo();
  printf("Inside macro1\n");
#define macro3 printf("Inside macro3\n");
  printf("Inside macro2\n");
  macro3 return 0;

  pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
WHILE(Chk(), do(), a, b, c)
pp(called) >


# 1 ---NEW ENTRY---
IF(Chk()(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(expanded) >


# 2 ---NEW ENTRY---
IF(Chk()(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(called) >


# 3 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk(), do(), do()(a, b, c)),
                   a, b, c) pp(expanded) >


# 4 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk(), do(), do()(a, b, c)),
                   a, b, c) pp(called) >


# 5 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk(), do(), do()(a, b, c)),
                   a, b, c) pp(expanded) >


# 6 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk(), do(), do()(a, b, c)),
                   a, b, c)



# 7 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(expanded) >


# 8 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(rescanned) >


# 9 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(rescanned) >


# 10 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c) pp(rescanned) >


# 11 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c)

        pp(lexed) >


# 12 ---NEW ENTRY---
IF(Chk()(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk(), do(), do()(a, b, c)), a, b,
                   c)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
WHILE(Chk, do, a, b, c)
pp(called) >


# 1 ---NEW ENTRY---
IF(Chk(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 2 ---NEW ENTRY---
IF(Chk(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk, do, do(a, b, c)), a, b, c)
        pp(called) >


# 3 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 4 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk, do, do(a, b, c)), a, b, c)
        pp(called) >


# 5 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk, do, do(a, b, c)), a, b,
                 c) pp(expanded) >


# 6 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk, do, do(a, b, c)), a, b,
                 c) pp(called) >


# 7 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 8 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(rescanned) >


# 9 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(rescanned) >


# 10 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(rescanned) >


# 11 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)

        pp(lexed) >


# 12 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
REPEATT(3, x)
pp(called) >


# 1 ---NEW ENTRY---
x REPEATT(DEC(3), x) pp(expanded) >


# 2 ---NEW ENTRY---
x REPEATT(DEC(3), x) pp(called) >


# 3 ---NEW ENTRY---
x REPEATT(PRIMITIVE_CAT(DEC_, 3), x) pp(expanded) >


# 4 ---NEW ENTRY---
x REPEATT(PRIMITIVE_CAT(DEC_, 3), x) pp(called) >


# 5 ---NEW ENTRY---
x REPEATT(DEC_3, x) pp(expanded) >


# 6 ---NEW ENTRY---
x REPEATT(DEC_3, x) pp(called) >


# 7 ---NEW ENTRY---
x REPEATT(2, x) pp(expanded) >


# 8 ---NEW ENTRY---
x REPEATT(2, x) pp(rescanned) >


# 9 ---NEW ENTRY---
x REPEATT(2, x) pp(rescanned) >


# 10 ---NEW ENTRY---
x REPEATT(2, x) pp(rescanned) >


# 11 ---NEW ENTRY---
x REPEATT(2, x) pp(rescanned) >


# 12 ---NEW ENTRY---
x REPEATT(2, x)

        pp(lexed) >


# 13 ---NEW ENTRY---
x REPEATT(2, x) REPEAT(3, x) pp(called) >


# 14 ---NEW ENTRY---
x REPEATT(2, x)
x DEFER(REPEAT)(DEC(3), x) pp(expanded) >


# 15 ---NEW ENTRY---
x REPEATT(2, x)
x DEFER(REPEAT)(DEC(3), x) pp(called) >


# 16 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT EMPTY()(DEC(3), x) pp(expanded) >


# 17 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT EMPTY()(DEC(3), x) pp(called) >


# 18 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(DEC(3), x) pp(expanded) >


# 19 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(DEC(3), x) pp(rescanned) >


# 20 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(DEC(3), x) pp(called) >


# 21 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(PRIMITIVE_CAT(DEC_, 3), x) pp(expanded) >


# 22 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(PRIMITIVE_CAT(DEC_, 3), x) pp(called) >


# 23 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(DEC_3, x) pp(expanded) >


# 24 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(DEC_3, x) pp(called) >


# 25 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x) pp(expanded) >


# 26 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x) pp(rescanned) >


# 27 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x) pp(rescanned) >


# 28 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x) pp(rescanned) >


# 29 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x) pp(rescanned) >


# 30 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x)

        pp(lexed) >


# 31 ---NEW ENTRY---
x REPEATT(2, x)
x REPEAT(2, x)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
WHILE(Chk, do, a, b, c)
pp(called) >


# 1 ---NEW ENTRY---
IF(Chk(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 2 ---NEW ENTRY---
IF(Chk(a, b, c))(OBSTRUCT(WHILE_INDIRECT)()(Chk, do, do(a, b, c)), a, b, c)
        pp(called) >


# 3 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 4 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT DEFER(EMPTY)()()(Chk, do, do(a, b, c)), a, b, c)
        pp(called) >


# 5 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk, do, do(a, b, c)), a, b,
                 c) pp(expanded) >


# 6 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY EMPTY()()()(Chk, do, do(a, b, c)), a, b,
                 c) pp(called) >


# 7 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(expanded) >


# 8 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)



# 9 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(rescanned) >


# 10 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)
        pp(rescanned) >


# 11 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)

        pp(lexed) >


# 12 ---NEW ENTRY---
IF(Chk(a, b, c))(WHILE_INDIRECT EMPTY()()(Chk, do, do(a, b, c)), a, b, c)

        pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL(MAP(GREET, Mum, Dad, Adam, Joe))
pp(called) >


# 1 ---NEW ENTRY---
EVAL(MAP(GREET, Mum, Dad, Adam, Joe))
pp(called) >


# 2 ---NEW ENTRY---
EVAL(GREET(Mum) IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad,
                                                                 Adam, Joe))())
pp(expanded) >


# 3 ---NEW ENTRY---
EVAL(GREET(Mum) IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad,
                                                                 Adam, Joe))())
pp(called) >


# 4 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(expanded) >


# 5 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(rescanned) >


# 6 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(called) >


# 7 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(HAS_ARGS(Dad, Adam, Joe))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(called) >


# 8 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(BOOL(FIRST(_END_OF_ARGUMENTS_ Dad, Adam, Joe)()))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 9 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(BOOL(FIRST(_END_OF_ARGUMENTS_ Dad, Adam, Joe)()))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 10 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(BOOL(FIRST(_END_OF_ARGUMENTS_ Dad, Adam, Joe)()))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 11 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(BOOL(_END_OF_ARGUMENTS_ Dad()))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 12 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(BOOL(_END_OF_ARGUMENTS_ Dad()))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 13 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(NOT(_END_OF_ARGUMENTS_ Dad())))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 14 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(NOT(_END_OF_ARGUMENTS_ Dad())))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 15 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(NOT(_END_OF_ARGUMENTS_ Dad())))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 16 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, _END_OF_ARGUMENTS_ Dad()))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 17 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, _END_OF_ARGUMENTS_ Dad()))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 18 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, _END_OF_ARGUMENTS_ Dad()))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 19 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(IS_PROBE(_NOT__END_OF_ARGUMENTS_ Dad())))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 20 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(IS_PROBE(_NOT__END_OF_ARGUMENTS_ Dad())))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 21 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(SECOND(_NOT__END_OF_ARGUMENTS_ Dad(),
                                0)))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 22 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(SECOND(_NOT__END_OF_ARGUMENTS_ Dad(),
                                0)))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 23 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 24 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 25 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 26 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 27 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                             Joe))())
pp(expanded) >


# 28 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                             Joe))())
pp(called) >


# 29 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                             Joe))())
pp(called) >


# 30 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(_NOT_0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 31 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(_NOT_0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 32 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(PROBE()))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                       Joe))())
pp(expanded) >


# 33 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(PROBE()))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                       Joe))())
pp(called) >


# 34 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 35 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 36 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 37 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 38 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(SECOND(~, 1, 0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 39 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(SECOND(~, 1, 0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 40 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 41 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 42 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 43 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 44 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 45 ---NEW ENTRY---
EVAL(Hi Mum !IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 46 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(BOOL(1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 47 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(BOOL(1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 48 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(BOOL(1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 49 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(NOT(1)))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 50 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(NOT(1)))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 51 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(NOT(1)))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 52 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, 1))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 53 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, 1))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 54 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(IS_PROBE(CAT(_NOT_, 1))))(
    DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 55 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(IS_PROBE(_NOT_1)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                            Joe))())
pp(expanded) >


# 56 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(IS_PROBE(_NOT_1)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                            Joe))())
pp(rescanned) >


# 57 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(SECOND(_NOT_1, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                             Joe))())
pp(expanded) >


# 58 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(SECOND(_NOT_1, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                             Joe))())
pp(called) >


# 59 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 60 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 61 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 62 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(NOT(0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 63 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(expanded) >


# 64 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(called) >


# 65 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(CAT(_NOT_, 0)))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                              Joe))())
pp(called) >


# 66 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(_NOT_0))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                       Joe))())
pp(expanded) >


# 67 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(_NOT_0))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                       Joe))())
pp(called) >


# 68 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(PROBE()))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                        Joe))())
pp(expanded) >


# 69 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(PROBE()))(DEFER1(_MAP)()(GREET, Dad, Adam,
                                                        Joe))())
pp(called) >


# 70 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 71 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 72 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 73 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(IS_PROBE(~, 1))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 74 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(SECOND(~, 1, 0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 75 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(SECOND(~, 1, 0))(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 76 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 77 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 78 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 79 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 80 ---NEW ENTRY---
EVAL(Hi Mum !_IF_ELSE(1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 81 ---NEW ENTRY---
EVAL(Hi Mum !CAT(_IF_, 1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 82 ---NEW ENTRY---
EVAL(Hi Mum !CAT(_IF_, 1)(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 83 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 84 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 85 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 86 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 87 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 88 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(DEFER1(_MAP)()(GREET, Dad, Adam, Joe))())
pp(called) >


# 89 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(_MAP EMPTY()()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 90 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(_MAP EMPTY()()(GREET, Dad, Adam, Joe))())
pp(called) >


# 91 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(_MAP()(GREET, Dad, Adam, Joe))())
pp(expanded) >


# 92 ---NEW ENTRY---
EVAL(Hi Mum !_IF_1(_MAP()(GREET, Dad, Adam, Joe))())
pp(rescanned) >


# 93 ---NEW ENTRY---
EVAL(Hi Mum !_MAP()(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(expanded) >


# 94 ---NEW ENTRY---
EVAL(Hi Mum !_MAP()(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(called) >


# 95 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(expanded) >


# 96 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(rescanned) >


# 97 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(rescanned) >


# 98 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe) _IF_1_ELSE())
pp(called) >


# 99 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe))
pp(expanded) >


# 100 ---NEW ENTRY---
EVAL(Hi Mum !MAP(GREET, Dad, Adam, Joe))
pp(rescanned) >


# 101 ---NEW ENTRY---
EVAL1024(Hi Mum !MAP(GREET, Dad, Adam, Joe))
pp(expanded) >


# 102 ---NEW ENTRY---
EVAL1024(Hi Mum !MAP(GREET, Dad, Adam, Joe))
pp(called) >


# 103 ---NEW ENTRY---
EVAL512(EVAL512(Hi Mum !MAP(GREET, Dad, Adam, Joe)))
pp(expanded) >


# 104 ---NEW ENTRY---
EVAL512(EVAL512(Hi Mum !MAP(GREET, Dad, Adam, Joe)))
pp(called) >


# 105 ---NEW ENTRY---
EVAL512(EVAL512(Hi Mum !MAP(GREET, Dad, Adam, Joe)))
pp(called) >


# 106 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(expanded) >


# 107 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(called) >


# 108 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(called) >


# 109 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 110 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 111 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 112 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 113 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 114 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 115 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 116 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 117 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 118 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 119 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 120 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 121 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 122 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 123 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 124 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 125 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 126 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 127 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 128 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 129 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 130 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))))
pp(expanded) >


# 131 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))))
pp(called) >


# 132 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))))
pp(called) >


# 133 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 134 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(rescanned) >


# 135 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 136 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 137 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 138 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 139 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 140 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 141 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 142 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 143 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 144 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 145 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 146 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 147 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 148 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 149 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 150 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 151 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 152 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 153 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 154 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 155 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 156 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 157 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 158 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 159 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 160 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 161 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 162 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 163 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 164 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 165 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 166 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 167 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 168 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 169 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 170 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 171 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 172 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 173 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 174 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 175 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 176 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 177 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 178 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 179 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 180 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 181 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 182 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 183 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 184 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 185 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 186 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 187 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 188 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 189 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 190 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 191 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 192 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 193 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 194 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 195 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 196 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 197 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 198 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 199 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 200 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 201 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 202 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 203 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 204 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 205 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 206 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 207 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 208 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 209 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 210 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 211 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 212 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 213 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 214 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 215 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 216 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 217 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 218 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 219 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 220 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 221 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 222 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 223 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 224 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 225 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 226 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 227 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 228 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 229 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 230 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 231 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 232 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 233 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 234 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 235 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 236 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 237 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 238 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 239 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 240 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 241 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 242 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 243 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 244 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 245 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 246 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 247 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 248 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 249 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 250 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 251 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 252 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 253 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 254 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 255 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 256 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 257 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 258 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 259 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 260 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 261 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 262 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 263 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 264 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 265 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 266 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 267 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 268 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 269 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 270 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 271 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 272 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 273 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 274 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 275 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 276 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 277 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 278 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 279 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 280 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 281 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 282 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 283 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 284 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 285 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 286 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 287 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 288 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 289 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 290 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 291 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 292 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 293 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 294 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 295 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 296 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 297 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 298 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 299 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 300 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 301 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 302 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 303 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 304 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 305 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 306 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 307 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 308 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 309 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 310 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 311 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 312 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 313 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 314 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 315 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 316 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 317 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 318 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 319 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 320 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 321 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 322 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 323 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 324 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 325 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 326 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 327 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 328 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 329 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 330 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 331 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 332 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 333 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 334 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 335 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 336 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 337 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 338 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 339 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 340 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 341 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 342 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 343 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 344 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 345 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 346 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 347 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 348 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 349 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 350 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 351 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 352 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 353 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 354 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 355 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 356 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 357 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 358 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 359 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 360 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 361 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 362 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 363 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 364 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 365 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 366 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 367 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 368 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 369 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 370 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 371 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 372 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 373 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 374 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 375 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 376 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 377 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 378 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 379 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 380 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 381 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 382 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 383 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 384 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 385 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 386 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 387 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 388 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 389 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 390 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 391 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 392 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 393 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 394 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 395 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 396 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 397 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 398 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 399 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 400 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 401 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 402 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 403 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 404 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 405 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 406 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 407 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 408 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 409 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 410 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 411 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 412 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 413 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 414 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 415 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 416 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 417 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 418 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 419 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 420 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 421 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 422 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 423 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 424 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 425 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 426 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 427 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 428 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 429 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 430 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 431 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 432 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 433 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 434 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 435 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 436 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 437 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 438 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 439 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 440 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 441 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 442 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 443 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 444 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 445 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 446 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 447 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 448 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 449 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 450 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 451 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 452 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 453 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 454 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 455 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 456 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 457 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 458 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 459 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 460 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 461 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 462 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 463 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 464 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 465 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 466 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 467 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 468 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 469 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 470 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 471 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 472 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 473 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 474 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 475 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 476 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 477 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 478 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 479 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 480 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 481 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 482 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 483 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 484 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 485 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 486 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 487 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 488 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 489 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 490 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 491 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 492 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 493 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 494 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 495 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 496 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 497 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 498 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 499 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 500 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 501 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 502 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 503 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 504 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 505 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 506 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 507 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 508 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 509 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 510 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 511 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 512 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 513 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 514 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 515 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 516 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 517 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 518 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 519 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 520 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 521 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 522 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 523 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 524 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 525 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 526 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 527 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 528 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 529 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 530 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 531 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 532 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 533 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 534 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 535 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 536 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 537 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 538 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 539 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 540 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 541 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 542 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 543 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 544 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 545 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 546 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 547 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 548 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 549 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 550 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 551 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 552 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 553 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 554 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 555 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 556 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 557 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 558 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 559 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 560 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 561 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 562 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 563 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 564 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 565 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 566 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 567 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 568 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 569 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 570 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 571 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 572 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 573 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 574 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 575 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 576 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 577 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 578 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 579 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 580 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 581 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 582 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 583 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 584 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 585 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 586 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 587 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 588 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 589 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 590 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 591 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 592 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 593 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 594 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 595 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 596 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 597 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 598 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 599 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 600 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 601 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 602 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 603 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 604 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 605 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 606 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 607 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 608 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 609 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 610 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 611 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 612 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 613 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 614 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 615 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 616 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 617 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 618 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 619 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 620 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 621 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 622 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 623 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 624 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 625 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 626 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 627 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 628 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 629 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 630 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 631 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 632 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 633 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 634 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 635 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 636 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 637 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 638 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 639 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 640 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 641 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 642 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 643 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 644 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 645 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 646 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 647 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 648 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 649 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 650 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 651 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 652 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 653 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 654 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 655 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 656 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 657 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 658 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 659 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 660 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 661 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 662 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 663 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 664 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 665 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 666 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 667 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 668 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 669 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 670 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 671 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 672 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 673 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 674 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 675 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 676 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 677 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 678 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 679 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 680 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 681 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 682 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 683 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 684 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 685 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 686 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 687 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 688 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 689 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 690 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 691 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 692 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 693 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 694 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 695 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 696 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 697 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 698 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 699 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 700 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 701 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 702 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 703 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 704 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 705 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 706 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 707 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 708 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 709 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 710 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 711 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 712 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 713 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 714 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 715 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 716 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 717 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 718 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 719 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 720 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 721 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 722 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 723 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 724 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 725 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 726 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 727 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 728 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 729 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 730 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 731 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 732 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 733 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 734 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 735 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 736 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 737 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 738 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 739 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 740 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 741 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 742 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 743 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 744 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 745 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 746 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 747 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 748 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 749 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 750 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 751 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 752 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 753 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 754 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 755 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 756 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 757 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 758 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 759 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 760 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 761 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 762 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 763 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 764 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 765 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 766 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 767 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 768 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 769 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 770 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 771 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 772 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 773 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 774 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 775 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 776 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 777 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 778 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 779 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 780 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 781 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 782 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 783 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 784 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 785 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 786 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 787 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))


# 788 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 789 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 790 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 791 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 792 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 793 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 794 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 795 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 796 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 797 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 798 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 799 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 800 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 801 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 802 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 803 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 804 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 805 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 806 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 807 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 808 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 809 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 810 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 811 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 812 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 813 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 814 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 815 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 816 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 817 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 818 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 819 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 820 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 821 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 822 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 823 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 824 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 825 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 826 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 827 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 828 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 829 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 830 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 831 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 832 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 833 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 834 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 835 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 836 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL128(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 837 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 838 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 839 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 840 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 841 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 842 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 843 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 844 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 845 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 846 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 847 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 848 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 849 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 850 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 851 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 852 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 853 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 854 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 855 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 856 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL128(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 857 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 858 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 859 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 860 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 861 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 862 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 863 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 864 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 865 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 866 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 867 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(expanded) >


# 868 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 869 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 870 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 871 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 872 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 873 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 874 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 875 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 876 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 877 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 878 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 879 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 880 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 881 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 882 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 883 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 884 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 885 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 886 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 887 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 888 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 889 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 890 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 891 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 892 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 893 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 894 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(expanded) >


# 895 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 896 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))))
pp(called) >


# 897 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 898 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(rescanned) >


# 899 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 900 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 901 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 902 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 903 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 904 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 905 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 906 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 907 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 908 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 909 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 910 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 911 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 912 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 913 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 914 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 915 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 916 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 917 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 918 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 919 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 920 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 921 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 922 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 923 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 924 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 925 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 926 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 927 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 928 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 929 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 930 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 931 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 932 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 933 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 934 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 935 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 936 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 937 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 938 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 939 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 940 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 941 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 942 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 943 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 944 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 945 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 946 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 947 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 948 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 949 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 950 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 951 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 952 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 953 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 954 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 955 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 956 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 957 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 958 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 959 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 960 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 961 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 962 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 963 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 964 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 965 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 966 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 967 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 968 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 969 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 970 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 971 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 972 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 973 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 974 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 975 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 976 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 977 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 978 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 979 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 980 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 981 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 982 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 983 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 984 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 985 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 986 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 987 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 988 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 989 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 990 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 991 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 992 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 993 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 994 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 995 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 996 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 997 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 998 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 999 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1000 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1001 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1002 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1003 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1004 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1005 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1006 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1007 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1008 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1009 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1010 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1011 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1012 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1013 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1014 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1015 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1016 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1017 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1018 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1019 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1020 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1021 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1022 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1023 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1024 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1025 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1026 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1027 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1028 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1029 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1030 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1031 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1032 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1033 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1034 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1035 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1036 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1037 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1038 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1039 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1040 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1041 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1042 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1043 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1044 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1045 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1046 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1047 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1048 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1049 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1050 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1051 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1052 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1053 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1054 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1055 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1056 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1057 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1058 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1059 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1060 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1061 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1062 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1063 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1064 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1065 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1066 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1067 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1068 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1069 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1070 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1071 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1072 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1073 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1074 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1075 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1076 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1077 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1078 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1079 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1080 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1081 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1082 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 1083 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 1084 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 1085 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1086 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 1087 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1088 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1089 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1090 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1091 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1092 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1093 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1094 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1095 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1096 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1097 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1098 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1099 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1100 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1101 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1102 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1103 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1104 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1105 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1106 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1107 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1108 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1109 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1110 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1111 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1112 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1113 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1114 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1115 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1116 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1117 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1118 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1119 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1120 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1121 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1122 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1123 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1124 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1125 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1126 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1127 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1128 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1129 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1130 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1131 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1132 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1133 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1134 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1135 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1136 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1137 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1138 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1139 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1140 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1141 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1142 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1143 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1144 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1145 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1146 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1147 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1148 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1149 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1150 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1151 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1152 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1153 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1154 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1155 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1156 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1157 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1158 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1159 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1160 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1161 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1162 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1163 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1164 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1165 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1166 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1167 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1168 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1169 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1170 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1171 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1172 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1173 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1174 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1175 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1176 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1177 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1178 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1179 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1180 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1181 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1182 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1183 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1184 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1185 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1186 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1187 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1188 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1189 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1190 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1191 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1192 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1193 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1194 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1195 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1196 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1197 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1198 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1199 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1200 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1201 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1202 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1203 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1204 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1205 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1206 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1207 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1208 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1209 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1210 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1211 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1212 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1213 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1214 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1215 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1216 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1217 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1218 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1219 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1220 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL64(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1221 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1222 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1223 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1224 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1225 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1226 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1227 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1228 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1229 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1230 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1231 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1232 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1233 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1234 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1235 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1236 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1237 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1238 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1239 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1240 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL64(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1241 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1242 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1243 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1244 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1245 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1246 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1247 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1248 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1249 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1250 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1251 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(expanded) >


# 1252 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1253 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1254 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1255 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1256 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1257 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1258 ---NEW ENTRY---
EVAL512(EVAL256(EVAL64(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1259 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1260 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1261 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1262 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1263 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1264 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1265 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1266 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1267 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1268 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1269 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1270 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1271 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1272 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1273 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1274 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(expanded) >


# 1275 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 1276 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))))
pp(called) >


# 1277 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1278 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(rescanned) >


# 1279 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1280 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1281 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1282 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1283 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1284 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1285 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1286 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1287 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1288 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1289 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1290 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1291 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1292 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1293 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1294 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1295 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1296 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1297 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1298 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1299 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1300 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1301 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1302 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1303 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1304 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1305 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1306 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1307 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1308 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1309 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1310 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1311 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1312 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1313 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1314 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1315 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1316 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1317 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1318 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1319 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1320 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1321 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1322 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1323 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1324 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1325 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1326 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1327 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1328 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1329 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1330 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1331 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1332 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1333 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1334 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1335 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1336 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1337 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1338 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1339 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1340 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1341 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1342 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1343 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1344 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1345 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1346 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1347 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1348 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1349 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1350 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1351 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1352 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1353 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1354 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1355 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1356 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1357 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1358 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1359 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1360 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1361 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1362 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1363 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1364 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1365 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1366 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1367 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1368 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1369 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1370 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1371 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1372 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1373 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1374 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1375 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1376 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1377 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1378 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1379 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1380 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1381 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1382 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1383 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1384 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1385 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1386 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1387 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1388 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1389 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1390 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1391 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1392 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1393 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1394 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1395 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1396 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1397 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1398 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1399 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1400 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1401 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1402 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1403 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1404 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1405 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1406 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1407 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1408 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1409 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1410 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1411 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1412 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL32(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1413 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1414 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1415 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1416 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1417 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1418 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1419 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1420 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1421 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1422 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1423 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1424 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1425 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1426 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1427 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1428 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1429 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1430 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1431 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1432 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL32(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1433 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1434 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1435 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1436 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1437 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1438 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1439 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1440 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1441 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1442 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1443 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(expanded) >


# 1444 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1445 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1446 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1447 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1448 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1449 ---NEW ENTRY---
EVAL512(EVAL256(EVAL32(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1450 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1451 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1452 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1453 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1454 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1455 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1456 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1457 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1458 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1459 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1460 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1461 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1462 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(expanded) >


# 1463 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1464 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(
    EVAL8(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))))
pp(called) >


# 1465 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1466 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(rescanned) >


# 1467 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1468 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1469 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1470 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1471 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1472 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1473 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1474 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1475 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1476 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1477 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1478 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1479 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1480 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1481 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1482 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1483 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1484 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL8(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1485 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1486 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1487 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1488 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1489 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1490 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1491 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1492 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL8(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1493 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1494 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1495 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1496 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1497 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1498 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1499 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1500 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1501 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1502 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1503 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1504 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1505 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1506 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(expanded) >


# 1507 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1508 ---NEW ENTRY---
EVAL512(EVAL256(
    EVAL16(EVAL4(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))))
pp(called) >


# 1509 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1510 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(rescanned) >


# 1511 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1512 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1513 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1514 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1515 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1516 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL4(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1517 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1518 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1519 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1520 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1521 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1522 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1523 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1524 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1525 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1526 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(expanded) >


# 1527 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1528 ---NEW ENTRY---
EVAL512(
    EVAL256(EVAL16(EVAL2(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))))
pp(called) >


# 1529 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1530 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(rescanned) >


# 1531 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1532 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1533 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL2(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1534 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1535 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1536 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL1(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1537 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1538 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(EVAL1(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(rescanned) >


# 1539 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(expanded) >


# 1540 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1541 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1542 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1543 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1544 ---NEW ENTRY---
EVAL512(EVAL256(EVAL16(Hi Mum !MAP(GREET, Dad, Adam, Joe))))
pp(rescanned) >


# 1545 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(expanded) >


# 1546 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1547 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL8(Hi Mum !MAP(GREET, Dad, Adam, Joe)))))
pp(called) >


# 1548 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(expanded) >


# 1549 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1550 ---NEW ENTRY---
EVAL512(EVAL256(EVAL8(EVAL4(EVAL4(Hi Mum !MAP(GREET, Dad, Adam, Joe))))))
pp(called) >


# 1551 ---NEW ENTRY---
Hi Mum !MAP(GREET, Dad, Adam, Joe)

        pp(complete) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
FOO("1")
pp(called) >


# 1 ---NEW ENTRY---
GET_FOO("1", FOO_3, FOO_2, FOO_1)("1") pp(expanded) >


# 2 ---NEW ENTRY---
GET_FOO("1", FOO_3, FOO_2, FOO_1)("1") pp(called) >


# 3 ---NEW ENTRY---
FOO_1("1")
pp(expanded) >


# 4 ---NEW ENTRY---
FOO_1("1")
pp(rescanned) >


# 5 ---NEW ENTRY---
FOO_1("1")
pp(called) >


# 6 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(expanded) >


# 7 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(rescanned) >


# 8 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(rescanned) >


# 9 ---NEW ENTRY---
printf("One arg: %s\n", "1")

        pp(lexed) >


# 10 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO("1", "2") pp(called) >


# 11 ---NEW ENTRY---
printf("One arg: %s\n", "1") GET_FOO("1", "2", FOO_3, FOO_2, FOO_1)("1", "2")
        pp(expanded) >


# 12 ---NEW ENTRY---
printf("One arg: %s\n", "1") GET_FOO("1", "2", FOO_3, FOO_2, FOO_1)("1", "2")
        pp(called) >


# 13 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(expanded) >


# 14 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(rescanned) >


# 15 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(called) >


# 16 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(expanded) >


# 17 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(rescanned) >


# 18 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(rescanned) >


# 19 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")

        pp(lexed) >


# 20 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO("1", "2", "3") pp(called) >


# 21 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        GET_FOO("1", "2", "3", FOO_3, FOO_2, FOO_1)("1", "2", "3")
            pp(expanded) >


# 22 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        GET_FOO("1", "2", "3", FOO_3, FOO_2, FOO_1)("1", "2", "3") pp(called) >


# 23 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(expanded) >


# 24 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(rescanned) >


# 25 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(called) >


# 26 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3") pp(expanded) >


# 27 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3") pp(rescanned) >


# 28 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3") pp(rescanned) >


# 29 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3")

            pp(lexed) >


# 30 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3")

            pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
EVAL(MAP(GREET, Mum, Dad, Adam, Joe))
pp(called) >


# 1 ---NEW ENTRY---
EVAL(MAP(GREET, Mum, Dad, Adam, Joe))
pp(called) >


# 2 ---NEW ENTRY---
EVAL(GREET(Mum) DEFER1(_MAP)()(GREET, Dad, Adam, Joe))
pp(expanded) >


# 3 ---NEW ENTRY---
EVAL(GREET(Mum) DEFER1(_MAP)()(GREET, Dad, Adam, Joe))
pp(called) >


# 4 ---NEW ENTRY---
EVAL(Hi(Mum); DEFER1(_MAP)()(GREET, Dad, Adam, Joe))
pp(expanded) >


# 5 ---NEW ENTRY---
EVAL(Hi(Mum); DEFER1(_MAP)()(GREET, Dad, Adam, Joe))
pp(rescanned) >


# 6 ---NEW ENTRY---
EVAL(Hi(Mum); DEFER1(_MAP)()(GREET, Dad, Adam, Joe))
pp(called) >


# 7 ---NEW ENTRY---
EVAL(Hi(Mum); _MAP EMPTY()()(GREET, Dad, Adam, Joe))
pp(expanded) >


# 8 ---NEW ENTRY---
EVAL(Hi(Mum); _MAP EMPTY()()(GREET, Dad, Adam, Joe))
pp(called) >


# 9 ---NEW ENTRY---
EVAL(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))
pp(expanded) >


# 10 ---NEW ENTRY---
EVAL(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))
pp(rescanned) >


# 11 ---NEW ENTRY---
EVAL(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))
pp(rescanned) >


# 12 ---NEW ENTRY---
EVAL1024(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))
pp(expanded) >


# 13 ---NEW ENTRY---
EVAL1024(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))
pp(called) >


# 14 ---NEW ENTRY---
EVAL1024(Hi(Mum); _MAP()(GREET, Dad, Adam, Joe))



# 15 ---NEW ENTRY---
EVAL1024(Hi(Mum); MAP(GREET, Dad, Adam, Joe))
pp(expanded) >


# 16 ---NEW ENTRY---
EVAL1024(Hi(Mum); MAP(GREET, Dad, Adam, Joe))
pp(rescanned) >


# 17 ---NEW ENTRY---
EVAL1024(Hi(Mum); MAP(GREET, Dad, Adam, Joe))
pp(called) >


# 18 ---NEW ENTRY---
EVAL1024(Hi(Mum); GREET(Dad) DEFER1(_MAP)()(GREET, Adam, Joe))
pp(expanded) >


# 19 ---NEW ENTRY---
EVAL1024(Hi(Mum); GREET(Dad) DEFER1(_MAP)()(GREET, Adam, Joe))
pp(called) >


# 20 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); DEFER1(_MAP)()(GREET, Adam, Joe))
pp(expanded) >


# 21 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); DEFER1(_MAP)()(GREET, Adam, Joe))
pp(rescanned) >


# 22 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); DEFER1(_MAP)()(GREET, Adam, Joe))
pp(called) >


# 23 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); _MAP EMPTY()()(GREET, Adam, Joe))
pp(expanded) >


# 24 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); _MAP EMPTY()()(GREET, Adam, Joe))
pp(called) >


# 25 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe))
pp(expanded) >


# 26 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe))
pp(rescanned) >


# 27 ---NEW ENTRY---
EVAL1024(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe))
pp(rescanned) >


# 28 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe)))
pp(expanded) >


# 29 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe)))
pp(called) >


# 30 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe)))
pp(called) >


# 31 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); _MAP()(GREET, Adam, Joe)))
pp(called) >


# 32 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); MAP(GREET, Adam, Joe)))
pp(expanded) >


# 33 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); MAP(GREET, Adam, Joe)))
pp(rescanned) >


# 34 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); MAP(GREET, Adam, Joe)))
pp(called) >


# 35 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); GREET(Adam) DEFER1(_MAP)()(GREET, Joe)))
pp(expanded) >


# 36 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); GREET(Adam) DEFER1(_MAP)()(GREET, Joe)))
pp(called) >


# 37 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); DEFER1(_MAP)()(GREET, Joe)))
pp(expanded) >


# 38 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); DEFER1(_MAP)()(GREET, Joe)))
pp(rescanned) >


# 39 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); DEFER1(_MAP)()(GREET, Joe)))
pp(called) >


# 40 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); _MAP EMPTY()()(GREET, Joe)))
pp(expanded) >


# 41 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); _MAP EMPTY()()(GREET, Joe)))
pp(called) >


# 42 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe)))
pp(expanded) >


# 43 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe)))
pp(rescanned) >


# 44 ---NEW ENTRY---
EVAL512(EVAL512(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe)))
pp(rescanned) >


# 45 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe))))
pp(expanded) >


# 46 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe))))
pp(called) >


# 47 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe))))
pp(called) >


# 48 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); _MAP()(GREET, Joe))))
pp(called) >


# 49 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); MAP(GREET, Joe))))
pp(expanded) >


# 50 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); MAP(GREET, Joe))))
pp(rescanned) >


# 51 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); MAP(GREET, Joe))))
pp(called) >


# 52 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam);
                        GREET(Joe) DEFER1(_MAP)()(GREET, ))))
pp(expanded) >


# 53 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam);
                        GREET(Joe) DEFER1(_MAP)()(GREET, ))))
pp(called) >


# 54 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                        DEFER1(_MAP)()(GREET, ))))
pp(expanded) >


# 55 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                        DEFER1(_MAP)()(GREET, ))))
pp(rescanned) >


# 56 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                        DEFER1(_MAP)()(GREET, ))))
pp(called) >


# 57 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                        _MAP EMPTY()()(GREET, ))))
pp(expanded) >


# 58 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                        _MAP EMPTY()()(GREET, ))))
pp(called) >


# 59 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); _MAP()(GREET, ))))
pp(expanded) >


# 60 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); _MAP()(GREET, ))))
pp(rescanned) >


# 61 ---NEW ENTRY---
EVAL512(EVAL256(EVAL256(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); _MAP()(GREET, ))))
pp(rescanned) >


# 62 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                _MAP()(GREET, )))))
pp(expanded) >


# 63 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                _MAP()(GREET, )))))
pp(called) >


# 64 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                _MAP()(GREET, )))))
pp(called) >


# 65 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                _MAP()(GREET, )))))
pp(called) >


# 66 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                MAP(GREET, )))))
pp(expanded) >


# 67 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                MAP(GREET, )))))
pp(rescanned) >


# 68 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                MAP(GREET, )))))
pp(called) >


# 69 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                GREET() DEFER1(_MAP)()(GREET, )))))
pp(expanded) >


# 70 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe);
                                GREET() DEFER1(_MAP)()(GREET, )))))
pp(called) >


# 71 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                DEFER1(_MAP)()(GREET, )))))
pp(expanded) >


# 72 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                DEFER1(_MAP)()(GREET, )))))
pp(rescanned) >


# 73 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                DEFER1(_MAP)()(GREET, )))))
pp(called) >


# 74 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                _MAP EMPTY()()(GREET, )))))
pp(expanded) >


# 75 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                _MAP EMPTY()()(GREET, )))))
pp(called) >


# 76 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                _MAP()(GREET, )))))
pp(expanded) >


# 77 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                _MAP()(GREET, )))))
pp(rescanned) >


# 78 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL128(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                _MAP()(GREET, )))))
pp(rescanned) >


# 79 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      _MAP()(GREET, ))))))
pp(expanded) >


# 80 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      _MAP()(GREET, ))))))
pp(called) >


# 81 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      _MAP()(GREET, ))))))
pp(called) >


# 82 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      _MAP()(GREET, ))))))
pp(called) >


# 83 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      MAP(GREET, ))))))
pp(expanded) >


# 84 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      MAP(GREET, ))))))
pp(rescanned) >


# 85 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      MAP(GREET, ))))))
pp(called) >


# 86 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      GREET() DEFER1(_MAP)()(GREET, ))))))
pp(expanded) >


# 87 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      GREET() DEFER1(_MAP)()(GREET, ))))))
pp(called) >


# 88 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); DEFER1(_MAP)()(GREET, ))))))
pp(expanded) >


# 89 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); DEFER1(_MAP)()(GREET, ))))))
pp(rescanned) >


# 90 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); DEFER1(_MAP)()(GREET, ))))))
pp(called) >


# 91 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); _MAP EMPTY()()(GREET, ))))))
pp(expanded) >


# 92 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); _MAP EMPTY()()(GREET, ))))))
pp(called) >


# 93 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); _MAP()(GREET, ))))))
pp(expanded) >


# 94 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); _MAP()(GREET, ))))))
pp(rescanned) >


# 95 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL64(Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi();
                                      Hi(); _MAP()(GREET, ))))))
pp(rescanned) >


# 96 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL32(
    Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi(); Hi(); _MAP()(GREET, )))))))
pp(expanded) >


# 97 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL32(
    Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi(); Hi(); _MAP()(GREET, )))))))
pp(called) >


# 98 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL32(
    Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi(); Hi(); _MAP()(GREET, )))))))
pp(called) >


# 99 ---NEW ENTRY---
EVAL512(EVAL256(EVAL128(EVAL64(EVAL32(EVAL32(
    Hi(Mum); Hi(Dad); Hi(Adam); Hi(Joe); Hi(); Hi(); _MAP()(GREET, )))))))
pp(called) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");
  return 0;
}

pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  pp(lexed) >


# 5 ---NEW ENTRY---
int main() {

  pp(lexed) >


# 6 ---NEW ENTRY---
int main() {
  printf pp(lexed) >


# 7 ---NEW ENTRY---
int main() {
 printf (
pp (lexed)>


# 8 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n"
pp (lexed)>


# 9 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" ,
pp (lexed)>


# 10 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , QUOTE ( VERSION )
pp (called)>


# 11 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , "VERSION"
pp (expanded)>


# 12 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , "VERSION"
pp (rescanned)>


# 13 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION") pp(lexed) >


# 14 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  pp(lexed) >


# 15 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");

  pp(lexed) >


# 16 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf pp(lexed) >


# 17 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf (
pp (lexed)>


# 18 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n"
pp (lexed)>


# 19 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" ,
pp (lexed)>


# 20 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( VERSION )
pp (called)>


# 21 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( VERSION )
pp (called)>


# 22 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( 2.3 )
pp (expanded)>


# 23 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( 2.3 )
pp (rescanned)>


# 24 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , QUOTE ( 2.3 )
pp (expanded)>


# 25 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , QUOTE ( 2.3 )
pp (called)>


# 26 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (expanded)>


# 27 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (rescanned)>


# 28 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (rescanned)>


# 29 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3") pp(lexed) >


# 30 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");
  pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
printf pp(lexed) >


# 1 ---NEW ENTRY---
printf (
pp (lexed)>


# 2 ---NEW ENTRY---
printf ( "%d\n"
pp (lexed)>


# 3 ---NEW ENTRY---
printf ( "%d\n" ,
pp (lexed)>


# 4 ---NEW ENTRY---
printf ( "%d\n" , MY_MACRO ( )
pp (called)>


# 5 ---NEW ENTRY---
printf ( "%d\n" , 123
pp (expanded)>


# 6 ---NEW ENTRY---
printf ( "%d\n" , 123
pp (rescanned)>


# 7 ---NEW ENTRY---
printf("%d\n", 123) pp(lexed) >


# 8 ---NEW ENTRY---
printf("%d\n", 123);
pp(lexed) >


# 9 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 9 ---NEW ENTRY---
printf("%d\n", 123);
pp(lexed) >


# 10 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , DEFER ( MY_MACRO )
pp (called)>


# 11 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO EMPTY ( )
pp (expanded)>


# 12 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO EMPTY ( )
pp (called)>


# 13 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO  
pp (expanded)>


# 14 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO
pp (rescanned)>


# 15 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO (
pp (lexed)>


# 16 ---NEW ENTRY---
printf("%d\n", 123);
 printf ( "%d\n" , MY_MACRO ( )
pp (lexed)>


# 17 ---NEW ENTRY---
printf("%d\n", 123);
printf("%d\n", MY_MACRO()) pp(lexed) >


# 18 ---NEW ENTRY---
printf("%d\n", 123);
printf("%d\n", MY_MACRO());
pp(lexed) >


# 19 ---NEW ENTRY---
printf("%d\n", 123);
printf("%d\n", MY_MACRO());

pp(lexed) >


# 20 ---NEW ENTRY---
printf("%d\n", 123);
printf("%d\n", MY_MACRO());

pp(complete) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
void pp(lexed) >


# 1 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , COUNT ( a , b , c )
pp (called)>


# 2 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , EXPAND ( COUNT_IMPL ( a , b , c , 3 , 2 , 1 ) )
pp (expanded)>


# 3 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , EXPAND ( COUNT_IMPL ( a , b , c , 3 , 2 , 1 ) )
pp (called)>


# 4 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , EXPAND ( COUNT_IMPL ( a , b , c , 3 , 2 , 1 ) )
pp (called)>


# 5 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , EXPAND ( 3 )
pp (expanded)>


# 6 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , EXPAND ( 3 )
pp (rescanned)>


# 7 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , 3
pp (expanded)>


# 8 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , 3
pp (rescanned)>


# 9 ---NEW ENTRY---
void main() {
 printf ( "%d\n" , 3
pp (rescanned)>


# 10 ---NEW ENTRY---
void main() {
  printf("%d\n", 3) pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
SUM(1, 2, 3)
pp(called) >


# 1 ---NEW ENTRY---
1 + DEFER(SUM_INDIRECT)()(2, 3)pp(expanded) >


# 2 ---NEW ENTRY---
1 + DEFER(SUM_INDIRECT)()(2, 3)pp(called) >


# 3 ---NEW ENTRY---
1 + SUM_INDIRECT EMPTY()()(2, 3)pp(expanded) >


# 4 ---NEW ENTRY---
1 + SUM_INDIRECT EMPTY()()(2, 3)pp(called) >


# 5 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3) pp(expanded) >


# 6 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3) pp(rescanned) >


# 7 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3) pp(rescanned) >


# 8 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3);
pp(lexed) >


# 9 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 9 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3);
pp(lexed) >


# 10 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3);

pp(lexed) >


# 11 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3);

pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
SUM(1, 2, 3)
pp(called) >


# 1 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3) pp(expanded) >


# 2 ---NEW ENTRY---
1 + SUM_INDIRECT()(2, 3) pp(called) >


# 3 ---NEW ENTRY---
1 + SUM(2, 3) pp(expanded) >


# 4 ---NEW ENTRY---
1 + SUM(2, 3) pp(rescanned) >


# 5 ---NEW ENTRY---
1 + SUM(2, 3) pp(rescanned) >


# 6 ---NEW ENTRY---
1 + SUM(2, 3);
pp(lexed) >


# 7 ---NEW ENTRY---
1 + SUM(2, 3);

pp(lexed) >


# 8 ---NEW ENTRY---
1 + SUM(2, 3);

pp(complete) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
void pp(lexed) >


# 1 ---NEW ENTRY---
void main(void) {
  SUM(1, 2, 3)
  pp(called) >


# 2 ---NEW ENTRY---
void main(void) {
  1 + DEFER(SUM_INDIRECT)()(2, 3)pp(expanded) >


# 3 ---NEW ENTRY---
void main(void) {
  1 + DEFER(SUM_INDIRECT)()(2, 3)pp(called) >


# 4 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT EMPTY()()(2, 3)pp(expanded) >


# 5 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT EMPTY()()(2, 3)pp(called) >


# 6 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3) pp(expanded) >


# 7 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3) pp(rescanned) >


# 8 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 8 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3) pp(rescanned) >


# 9 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3) pp(rescanned) >


# 10 ---NEW ENTRY---
void main(void) {



# 11 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);

  pp(lexed) >


# 12 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 pp(lexed) >


# 13 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + pp(lexed) >


# 14 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + SUM_INDIRECT() pp(called) >


# 15 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + SUM pp(expanded) >


# 16 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + SUM pp(rescanned) >


# 17 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + SUM(2, 3) pp(called) >


# 18 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + DEFER(SUM_INDIRECT)()(3)pp(expanded) >


# 19 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + DEFER(SUM_INDIRECT)()(3)pp(called) >


# 20 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT EMPTY()()(3)pp(expanded) >


# 21 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT EMPTY()()(3)pp(called) >


# 22 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3) pp(expanded) >


# 23 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3) pp(rescanned) >


# 24 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3) pp(rescanned) >


# 25 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  pp(lexed) >


# 26 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);

  pp(lexed) >


# 27 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 pp(lexed) >


# 28 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);


# 29 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 pp(lexed) >


# 30 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + pp(lexed) >


# 31 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + SUM_INDIRECT() pp(called) >


# 32 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + SUM pp(expanded) >


# 33 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + SUM pp(rescanned) >


# 34 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + SUM(3) pp(called) >


# 35 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + DEFER(SUM_INDIRECT)()() pp(expanded) >


# 36 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + DEFER(SUM_INDIRECT)()() pp(called) >


# 37 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT EMPTY()()() pp(expanded) >


# 38 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT EMPTY()()() pp(called) >


# 39 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()() pp(expanded) >


# 40 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()() pp(rescanned) >


# 41 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()() pp(rescanned) >


# 42 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  pp(lexed) >


# 43 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();

  pp(lexed) >


# 44 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 pp(lexed) >


# 45 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + pp(lexed) >


# 46 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 pp(lexed) >


# 47 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + pp(lexed) >


# 48 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 pp(lexed) >


# 49 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + pp(lexed) >


# 50 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + SUM_INDIRECT() pp(called) >


# 51 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + SUM pp(expanded) >


# 52 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + SUM pp(rescanned) >


# 53 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + SUM() pp(called) >


# 54 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +DEFER(SUM_INDIRECT)()() pp(expanded) >


# 55 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +DEFER(SUM_INDIRECT)()() pp(called) >


# 56 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT EMPTY()()()



# 57 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT EMPTY()()() pp(called) >


# 58 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()() pp(expanded) >


# 59 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()() pp(rescanned) >


# 60 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()() pp(rescanned) >


# 61 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()();
  pp(lexed) >


# 62 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()();

  pp(lexed) >


# 63 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()();
}
pp(lexed) >


# 64 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()();
}

pp(lexed) >


# 65 ---NEW ENTRY---
void main(void) {
  1 + SUM_INDIRECT()(2, 3);
  1 + 2 + SUM_INDIRECT()(3);
  1 + 2 + 3 + SUM_INDIRECT()();
  1 + 2 + 3 + +SUM_INDIRECT()();
}

pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 1 ---NEW ENTRY---
int main() {
  int result = DEFER(SUM_INDIRECT)(1, 2) pp(expanded) >


# 2 ---NEW ENTRY---
int main() {
  int result = DEFER(SUM_INDIRECT)(1, 2) pp(called) >


# 3 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT EMPTY()(1, 2) pp(expanded) >


# 4 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(rescanned) >


# 5 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2);
  pp(lexed) >



# 0 ---NEW ENTRY---



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 2 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(expanded) >


# 3 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(called) >


# 4 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(called) >


# 5 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()(1, 2)) pp(expanded) >


# 6 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 6 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()(1, 2)) pp(expanded) >


# 7 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()(1, 2)) pp(called) >


# 8 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(expanded) >


# 9 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(rescanned) >


# 10 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(expanded) >


# 11 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(called) >


# 12 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 12 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(called) >


# 13 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(expanded) >


# 14 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 15 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 16 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 17 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  pp(lexed) >


# 18 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));

  pp(lexed) >


# 19 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  return pp(lexed) >


# 20 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  return 0 pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 3 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(expanded) >


# 4 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(called) >


# 5 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)(1, 2)) pp(called) >


# 6 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()(1, 2)) pp(expanded) >


# 7 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()(1, 2)) pp(called) >


# 8 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(expanded) >


# 9 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(rescanned) >


# 10 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(expanded) >


# 11 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT(1, 2) pp(called) >


# 12 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(expanded) >


# 13 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 14 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 15 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 16 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  pp(lexed) >


# 17 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));

  pp(lexed) >


# 18 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  return pp(lexed) >


# 19 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 19 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));
  return pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 1 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(expanded) >


# 2 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(called) >


# 3 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT(1, 2)) pp(called) >


# 4 ---NEW ENTRY---
int main() {
  int result = EVAL(((1) + (2))) pp(expanded) >


# 5 ---NEW ENTRY---
int main() {
  int result = EVAL(((1) + (2))) pp(rescanned) >


# 6 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(expanded) >


# 7 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 8 ---NEW ENTRY---
int main() {
  int result = ((1) + (2)) pp(rescanned) >


# 9 ---NEW ENTRY---
int main() {



# 10 ---NEW ENTRY---
int main() {
  int result = ((1) + (2));

  pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  pp(lexed) >


# 5 ---NEW ENTRY---
int main() {

  pp(lexed) >


# 6 ---NEW ENTRY---
int main() {
  printf pp(lexed) >


# 7 ---NEW ENTRY---
int main() {
 printf (
pp (lexed)>


# 8 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n"
pp (lexed)>


# 9 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" ,
pp (lexed)>


# 10 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , QUOTE ( VERSION )



# 11 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , "VERSION"
pp (expanded)>


# 12 ---NEW ENTRY---
int main() {
 printf ( "Direct: %s\n" , "VERSION"
pp (rescanned)>


# 13 ---NEW ENTRY---
int main() {



# 14 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  pp(lexed) >


# 15 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");

  pp(lexed) >


# 16 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf pp(lexed) >


# 17 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf (
pp (lexed)>


# 18 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n"
pp (lexed)>


# 19 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" ,
pp (lexed)>


# 20 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( VERSION )
pp (called)>


# 21 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( VERSION )
pp (called)>


# 22 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( 2.3 )
pp (expanded)>


# 23 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , STR ( 2.3 )
pp (rescanned)>


# 24 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , QUOTE ( 2.3 )
pp (expanded)>


# 25 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , QUOTE ( 2.3 )
pp (called)>


# 26 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (expanded)>


# 27 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (rescanned)>


# 28 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
 printf ( "Expanded: %s\n" , "2.3"
pp (rescanned)>


# 29 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3") pp(lexed) >


# 30 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");
  pp(lexed) >


# 31 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");

  pp(lexed) >


# 32 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");
  return pp(lexed) >


# 33 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 33 ---NEW ENTRY---
int main() {
  printf("Direct: %s\n", "VERSION");
  printf("Expanded: %s\n", "2.3");
  return pp(lexed) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
FOO("1")
pp(called) >


# 1 ---NEW ENTRY---
GET_FOO("1", FOO_3, FOO_2, FOO_1)("1") pp(expanded) >


# 2 ---NEW ENTRY---
GET_FOO("1", FOO_3, FOO_2, FOO_1)("1") pp(called) >


# 3 ---NEW ENTRY---
FOO_1("1")
pp(expanded) >


# 4 ---NEW ENTRY---
FOO_1("1")
pp(rescanned) >


# 5 ---NEW ENTRY---
FOO_1("1")
pp(called) >


# 6 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(expanded) >


# 7 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(rescanned) >


# 8 ---NEW ENTRY---
printf("One arg: %s\n", "1") pp(rescanned) >


# 9 ---NEW ENTRY---
printf("One arg: %s\n", "1")

        pp(lexed) >


# 10 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO("1", "2") pp(called) >


# 11 ---NEW ENTRY---
printf("One arg: %s\n", "1") GET_FOO("1", "2", FOO_3, FOO_2, FOO_1)("1", "2")
        pp(expanded) >


# 12 ---NEW ENTRY---
printf("One arg: %s\n", "1") GET_FOO("1", "2", FOO_3, FOO_2, FOO_1)("1", "2")
        pp(called) >


# 13 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(expanded) >


# 14 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(rescanned) >


# 15 ---NEW ENTRY---
printf("One arg: %s\n", "1") FOO_2("1", "2") pp(called) >


# 16 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(expanded) >


# 17 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(rescanned) >


# 18 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        pp(rescanned) >


# 19 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")

        pp(lexed) >


# 20 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO("1", "2", "3") pp(called) >


# 21 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        GET_FOO("1", "2", "3", FOO_3, FOO_2, FOO_1)("1", "2", "3")
            pp(expanded) >


# 22 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        GET_FOO("1", "2", "3", FOO_3, FOO_2, FOO_1)("1", "2", "3") pp(called) >


# 23 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(expanded) >


# 24 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(rescanned) >


# 25 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        FOO_3("1", "2", "3") pp(called) >


# 26 ---NEW ENTRY---
printf("One arg: %s\n", "1") printf("Two args: %s %s\n", "1", "2")
        printf("Three args: %s %s %s\n", "1", "2", "3") pp(expanded) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 1 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(expanded) >


# 2 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(called) >


# 3 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(called) >


# 4 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()()(1, 2)) pp(expanded) >


# 5 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()()(1, 2)) pp(called) >


# 6 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT()(1, 2)) pp(expanded) >


# 7 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT()(1, 2)) pp(rescanned) >


# 8 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT()(1, 2) pp(expanded) >


# 9 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT()(1, 2) pp(called) >


# 10 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(expanded) >


# 11 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 12 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 13 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 14 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  pp(lexed) >


# 15 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);

  pp(lexed) >


# 16 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return pp(lexed) >


# 17 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0 pp(lexed) >


# 18 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0;
  pp(lexed) >


# 19 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0;

  pp(lexed) >


# 20 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0;
}
pp(lexed) >


# 21 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0;
}

pp(lexed) >


# 22 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  return 0;
}

pp(complete) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  pp(lexed) >


# 5 ---NEW ENTRY---
int main() {


# 6 ---NEW ENTRY---
int main() {
  int pp(lexed) >


# 7 ---NEW ENTRY---
int main() {
  int result pp(lexed) >


# 8 ---NEW ENTRY---
int main() {
  int result = pp(lexed) >


# 9 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 10 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(expanded) >


# 11 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(called) >



# 0 ---NEW ENTRY---


# 0 ---NEW ENTRY---
Usage: rlwrap [-options] -z ./filter.py <command>

Source:
    https://github.com/notfoundry/ppstep
    /nix/store/238vrcj4b0fcp0yivxcp7mzl1m9jrmkk-rlwrap-0.46.1/share/rlwrap/filters/rlwrapfilter.py
Pre-requirement:
---
    clang-format: nix-env -iA nixpkgs.clang-tools

pp-shell:
---
prompt: pp>
commands:
    q-quit
    s-step
    c-continue, r-run

    bt-backtrace
    ft-forwardtrace
    b-break, For example:
        break call <macro>
        break expand <macro>
    d-delete: delete call <macro>

process-status:
    called   -  Scanned a expandable macro-call
    expanded -  Start macro expand
    rescanned-  Back to the current frame's cursor, and start scan again
    lexed    -  Token

color explained:
    white   -   Found expandable token macro-call, but still require check it's argument firstly,
    yellow  -   expaned result, but still keep cursor unmoved for rescan:
                  1. expanded done, result as!
                  2. then back to the cursor at beginning of the white region
                  3. and rescan again
    blue    -   move cursor: totally done this token, and put cursor to next token, please note it's not 'blue-paint'

# 0 ---NEW ENTRY---
int pp(lexed) >


# 1 ---NEW ENTRY---
int main pp(lexed) >


# 2 ---NEW ENTRY---
int main (
pp (lexed)>


# 3 ---NEW ENTRY---
int main() pp(lexed) >


# 4 ---NEW ENTRY---
int main() {
  pp(lexed) >


# 5 ---NEW ENTRY---
int main() {

  pp(lexed) >


# 6 ---NEW ENTRY---
int main() {
  int pp(lexed) >


# 7 ---NEW ENTRY---
int main() {
  int result pp(lexed) >


# 8 ---NEW ENTRY---
int main() {
  int result = pp(lexed) >


# 9 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(called) >


# 10 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(expanded) >


# 11 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(called) >


# 12 ---NEW ENTRY---
int main() {
  int result = EVAL(DEFER(SUM_INDIRECT)()(1, 2)) pp(called) >


# 13 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()()(1, 2)) pp(expanded) >


# 14 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT EMPTY()()(1, 2)) pp(called) >


# 15 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT()(1, 2)) pp(expanded) >


# 16 ---NEW ENTRY---
int main() {
  int result = EVAL(SUM_INDIRECT()(1, 2)) pp(rescanned) >


# 17 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT()(1, 2) pp(expanded) >


# 18 ---NEW ENTRY---
int main() {
  int result = SUM_INDIRECT()(1, 2) pp(called) >


# 19 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(expanded) >


# 20 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 21 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 22 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2) pp(rescanned) >


# 23 ---NEW ENTRY---
int main() {
  int result = SUM(1, 2);
  pp(lexed) >

