---
layout: post
title:  "c lang: inline"
date:   2012-02-17 13:31:01 +0800
categories: lang
tags: c
---

* content
{:toc}


# inline

In K&R C or C89, inline was not part of the language.
Many compilers implemented it as an extension, but there were no defined semantics regarding how it worked.
GCC was among the first to implement inlining, and introduced the `inline`, `static inline`, and `extern inline` constructs;
most pre-C99 compiler generally follow its lead.

C99 (or GNU99):

- inline: like GNU89 "extern inline"; no externally visible function is emitted, but one might be called and so must exist
- extern inline: like GNU89 "inline": externally visible code is emitted, so at most one translation unit can use this.
- static inline: like GNU89 "static inline". This is the only portable one between gnu89 and c99

# sample1: extern inline

Force no global function symbol at all.
So if need function-ptr, there will have a compile error.

The inline code here:
```c
    /* inline2.h */
    #ifndef __INLINE2_H__
    #define __INLINE2_H__

    extern inline int x2(int num) /* if change to 'static inline', everything ok */
    {
    	return num * 2;
    }

    #endif
```

This is the caller code:
```c
    /* main.c */
    #include <stdio.h>
    #include "inline2.h"

    int main(int argc, char *argv[])
    {
    	int var = x2(4);       // can be inlined
    	int (*foo)(int) = &x2; // cann't be inlined

    	printf("%d\n",var);
    	printf("%d\n",foo(4));
    	return 0;
    }
```

## compile error:

```sh
gcc -o test2 main2.c
/tmp/cccihFGz.o: In function `main':
main2.c:(.text+0x15): undefined reference to `x2'
main2.c:(.text+0x20): undefined reference to `x2'
collect2: error: ld returned 1 exit status
```

## Add translate unit: get global function symbol

```c
    #include "inline2.h"#

    int x2(int num)
    {
    	return num * 2;
    }
```

```sh
gcc -o test2 main2.c inline2.c
```

# sample2: `inline` vs `static inline` vs `extern inline`

[Come from][1]

The sample code list here: header.h, trans.c, main.c

The header.h declare and define the inline function, but trans.c define it again but implement as different code.
The main.c will call that function.

```c
    /* header.h */
    #ifndef __HEADER__
    #define __HEADER__

    #include <stdio.h>

    extern inline int func1(void)
    { return 5; }

    static inline int func2(void)
    { return 6; }

    inline int func3(void)
    { return 7; }

    #endif
```


```c
    /* trans.c */
    #include <stdio.h>

    int func1(void)
    { return 500; }

    int func2(void)
    { return 600; }

    int func3(void)
    { return 700; }
```

```c
    /* main.c */
    #include <stdio.h>
    #include "inline.h"

    int main(int argc, char *argv[])
    {
        printf("%d\n",func1());
        printf("%d\n",func2());
        printf("%d\n",func3());
        return 0;
    }
```


## gcc complain dup 'func3': extern inline

```sh
$ gcc -o test main.c trans.c
/tmp/ccW0mc5G.o: In function `func3':
trans.c:(.text+0x16): multiple definition of `func3'
/tmp/ccgl76iy.o:main.c:(.text+0xb): first defined here
collect2: error: ld returned 1 exit status
```
### GNU 89 inline semantics

The following text is quoted from [GCC Document: An Inline Function is As Fast As a Macro][1] explains why `func3` is a duplicate definition instead of `func1`.
Since `func3` (instead of `func1`) is an externally visible symbol (in GNU89 inline semantics)

#### inline without static

    **When an inline function is not static, then the compiler must assume that there may be calls from other source files;
    since a global symbol can be defined only once in any program, the function must not be defined in the other source files,** so the calls therein cannot be integrated.
    Therefore, a non-static inline function is always compiled on its own in the usual fashion.

#### extern inline

    If you specify **both inline and extern in the function definition**, then the definition is used only for inlining.
    **In no case is the function compiled on its own, not even if you refer to its address explicitly.
    Such an address becomes an external reference, as if you had only declared the function, and had not defined it.**

    Can be verified by sample1.

## C99 complain dup 'func1': inline

If compiled with C99 standard, i.e., `gcc -o main main.c tran.c -std=c99`,
the linker will complain that definition of `func1` is a duplicate due to the reason that **extern inline** in C99 is a external definition as mentioned in other posts and comments.

```c
gcc -o main main.c trans.c -std=c99
/tmp/cc2vVv2T.o: In function `func1':
trans.c:(.text+0x0): multiple definition of `func1'
/tmp/cciklMdG.o:main.c:(.text+0x0): first defined here
collect2: error: ld returned 1 exit status
```

Please also refer to [this][2] execellent answer about semantic differents between `GNU89 inline` and `C99 inline.`

### GNU89:

#### inline:

The function may be inlined (it's just a hint though).
An out-of-line version is always emitted and externally visible.
Hence you can only have such an inline defined in one compilation unit, and every other one needs to see it as an out-of-line function (or you'll get duplicate symbols at link time).

#### static inline

static inline will not generate a externally visible out-of-line version, though it might generate a file static one. The one-definition rule does not apply, since there is never an emitted external symbol nor a call to one.

#### extern inline

extern inline enforce only inline version, will not generate an out-of-line version, but might call one which you therefore must define in some other compilation unit (`Can be verified by sample1.`). The one-definition rule applies, though; the out-of-line version must have the same code as the inline offered here, in case the compiler calls that instead.

### C99 (or GNU99):

- inline: like GNU89 "extern inline"; no externally visible function is emitted, but one might be called and so must exist
- extern inline: like GNU89 "inline": externally visible code is emitted, so at most one translation unit can use this.
- static inline: like GNU89 "static inline". This is the only portable one between gnu89 and c99
- C++: A function that is inline anywhere must be inline everywhere, with the same definition. The compiler/linker will sort out multiple instances of the symbol. There is no definition of static inline or extern inline, though many compilers have them (typically following the gnu89 model).


## g++ build succ

When compiled with `g++`, the source program are considered as `C++` source.
Since `func1`, `func2` and `func3` are defined in multiple translation units and their definitions are different,
the [One Defintion Rule of C++][3] is violated.
Since the compiler is not required to generate dignostic message when definitions spans multiple translation units, the behavior is undefined.
So we can't explain the follow result from g++, it's just depend on the compiler's detail implemented:

```sh
./test
500
6
700
```

  [1]: http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Inline.html#Inline
  [2]: https://stackoverflow.com/a/216546/504646
  [3]: http://en.wikipedia.org/wiki/One_Definition_Rule

